{"version":3,"sources":["features/blocks/BlocksSlice.js","features/blocks/Note.js","features/blocks/Text.js","features/blocks/Blocks.js","features/HeaderButtons/HeaderButtons.js","features/graph/Graph.js","App.js","reportWebVitals.js","features/ArgButtons/ArgButtonsSlice.js","app/store.js","index.js"],"names":["BlocksSlice","createSlice","name","initialState","caret","activeId","order","indents","id1","txts","notes","views","reducers","updateText","state","action","e","document","activeElement","getAttribute","id","payload","value","selectionStart","splitText","idx","indexOf","id2","nanoid","textOne","substr","textTwo","newOrder","splice","mergeText","tabOut","tabIn","toggleNote","updateNote","note","toggleAllNotes","Object","keys","forEach","status","actions","Note","dispatch","view","indent","undefined","class","style","marginRight","onSelect","onChange","onClick","ctrlKey","metaKey","shiftKey","ToggleNoteButton","type","Text","txt","placeholder","Blocks","useDispatch","useSelector","blocks","map","MergeButton","SplitButton","TabOutButton","TabInButton","Node","position","callback","x","y","onStop","onDrag","defaultPosition","className","Graph","useState","positions","setPosition","handleDrag","d","srcElement","lastX","deltaX","lastY","deltaY","c","nodes","connections","links","i","length","key","push","start","end","strokeWidth","lineColor","dashness","headColor","Connections","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ArgButtonsSlice","connection_color","tail_selected","tail_id","updateColor","color","updateTail","resetToDragging","configureStore","reducer","blocksReducer","args","ArgsButtonsReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.d242a29e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport const BlocksSlice = createSlice({\n  name: 'blocks',\n  initialState: {\n    caret: -1,\n    activeId: 'id1',\n    order: ['id1'],\n    indents: { id1: 0 },\n    txts: { id1: '' },\n    notes: { id1: '' },\n    views: { id1: false },\n  },\n  reducers: {\n    // Text Updates\n    updateText: (state, action) => {\n      const e = document.activeElement;\n      if (e.getAttribute('class') !== 'text') {\n        // only update when active element\n        return state;\n      }\n      const id = action.payload;\n      state.txts[id] = e.value;\n      state.caret = e.selectionStart;\n      state.activeId = id;\n    },\n    splitText: (state) => {\n      const id = state.activeId;\n      const idx = state.order.indexOf(id);\n      const id2 = nanoid();\n      const caret = state.caret;\n      const textOne = state.txts[id].substr(0, caret);\n      const textTwo = state.txts[id].substr(caret);\n      const newOrder = [...state.order];\n      newOrder.splice(idx + 1, 0, id2);\n\n      state = {\n        ...state,\n        activeId: id2,\n        order: newOrder,\n        txts: { ...state.txts, [id]: textOne, [id2]: textTwo },\n        indents: { ...state.indents, [id2]: 0 },\n        notes: { ...state.notes, [id2]: '' },\n        views: { ...state.views, [id2]: false },\n      };\n      return state;\n    },\n    mergeText: (state) => {\n      const id2 = state.activeId;\n      const idx = state.order.indexOf(id2);\n      if (idx === 0) {\n        // not possible to merge up first block\n        return state;\n      }\n      const id1 = state.order[idx - 1];\n      const newOrder = [...state.order];\n      newOrder.splice(idx, 1);\n\n      state = {\n        ...state,\n        activeId: id1,\n        order: newOrder,\n        txts: { ...state.txts, [id1]: state.txts[id1] + state.txts[id2] },\n        notes: { ...state.notes, [id1]: state.notes[id1] + state.notes[id2] },\n      };\n      return state;\n    },\n    // Tabbing Buttons\n    tabOut: (state) => {\n      const id = state.activeId;\n      state.indents[id] += 1;\n    },\n    tabIn: (state) => {\n      const id = state.activeId;\n      if (state.indents[id] > 0) {\n        state.indents[id] -= 1;\n      }\n    },\n    // Note Updating\n    toggleNote: (state, action) => {\n      const id = action.payload;\n      if (state.views[id] === true) {\n        state.views[id] = false;\n      } else {\n        state.views[id] = true;\n      }\n      return state;\n    },\n    updateNote: (state, action) => {\n      const id = action.payload;\n      const e = document.activeElement;\n      const note = e.value; // .replace(/\\n\\r?/g, '<br />');\n      state.notes[id] = note;\n    },\n    toggleAllNotes: (state, action) => {\n      Object.keys(state.notes).forEach((id) => {\n        state.notes[id] = action.status;\n      });\n    },\n  },\n});\n\nexport const {\n  updateText,\n  splitText,\n  mergeText,\n  tabOut,\n  tabIn,\n  toggleNote,\n  updateNote,\n  toggleAllNotes,\n} = BlocksSlice.actions;\nexport default BlocksSlice.reducer;\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport { toggleNote, updateNote } from './BlocksSlice';\nimport './Blocks.css';\n\nfunction Note(dispatch, id, note, view, indent) {\n  if (view == false || view == undefined) {\n    return <div></div>;\n  }\n  const n = (\n    <TextareaAutosize\n      id={id}\n      class=\"note\"\n      style={{\n        marginRight: indent * 10,\n      }}\n      onSelect={() => dispatch(updateNote(id))}\n      onChange={() => dispatch(updateNote(id))}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch(updateNote(id));\n      }}\n      value={note}\n    />\n  );\n  return n;\n}\n\nfunction ToggleNoteButton(dispatch, id) {\n  const toggle = (\n    <label class=\"switch\">\n      <input type=\"checkbox\" onClick={() => dispatch(toggleNote(id))} />\n      <span class=\"slider round\"></span>\n    </label>\n  );\n  return toggle;\n}\n\nexport { Note, ToggleNoteButton };\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport { updateText } from './BlocksSlice';\nimport './Blocks.css';\n\nexport default function Text(dispatch, id, txt, indent) {\n  const text = (\n    <TextareaAutosize\n      id={id}\n      class=\"text\"\n      placeholder=\"paste hebrew here\"\n      style={{\n        marginRight: indent * 10,\n      }}\n      onSelect={() => dispatch(updateText(id))}\n      onChange={() => dispatch(updateText(id))}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch(updateText(id));\n      }}\n      value={txt}\n    />\n  );\n  return text;\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Note, ToggleNoteButton } from './Note';\nimport Text from './Text';\nimport './Blocks.css';\n\nexport default function Blocks() {\n  const dispatch = useDispatch();\n  const order = useSelector((state) => state.blocks.order);\n  const txts = useSelector((state) => state.blocks.txts);\n  const indents = useSelector((state) => state.blocks.indents);\n  const notes = useSelector((state) => state.blocks.notes);\n  const views = useSelector((state) => state.blocks.views);\n\n  const blocks = order.map((id) => (\n    <div class=\"cell\">\n      {ToggleNoteButton(dispatch, id)}\n      {Text(dispatch, id, txts[id], indents[id])}\n      {Note(dispatch, id, notes[id], views[id], indents[id])}\n    </div>\n  ));\n  return blocks;\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { mergeText, splitText, tabOut, tabIn } from '../blocks/BlocksSlice';\nimport './HeaderButtons.css';\n\nexport function MergeButton() {\n  const dispatch = useDispatch();\n  const mergeButton = (\n    <button type=\"button\" onClick={() => dispatch(mergeText())}>\n      merge\n    </button>\n  );\n  return mergeButton;\n}\n\nexport function SplitButton() {\n  const dispatch = useDispatch();\n  const splitButton = (\n    <button type=\"button\" onClick={() => dispatch(splitText())}>\n      split\n    </button>\n  );\n  return splitButton;\n}\n\nexport function TabOutButton() {\n  const dispatch = useDispatch();\n  const tabOutButton = (\n    <button type=\"button\" onClick={() => dispatch(tabOut())}>\n      tabout\n    </button>\n  );\n  return tabOutButton;\n}\n\nexport function TabInButton() {\n  const dispatch = useDispatch();\n  const tabInButton = (\n    <button type=\"button\" onClick={() => dispatch(tabIn())}>\n      tabin\n    </button>\n  );\n  return tabInButton;\n}\n\nexport default function HeaderButtons() {\n  return (\n    <div class=\"header_buttons\">\n      {TabInButton()}\n      {TabOutButton()}\n      {MergeButton()}\n      {SplitButton()}\n    </div>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport React, { useState } from 'react';\nimport Xarrow from 'react-xarrows';\nimport Draggable from 'react-draggable';\nimport './Graph.css';\n\nconst Connections = (order) => {\n  let links = {};\n  for (let i = 0; i < order.length - 1; i++) {\n    links[order[i]] = order[i + 1];\n  }\n  let connections = [];\n  Object.keys(links).forEach((key) =>\n    connections.push(\n      <Xarrow\n        start={key}\n        end={links[key]}\n        strokeWidth={1}\n        lineColor=\"grey\"\n        dashness={true}\n        headColor=\"grey\"\n      />\n    )\n  );\n  return connections;\n};\n\nconst Node = (id, position, txt, callback) => {\n  const [x, y] = position;\n  return (\n    <div>\n      <Draggable\n        onStop={callback}\n        onDrag={callback}\n        key={id}\n        defaultPosition={{\n          x: x,\n          y: y,\n        }}\n      >\n        <div className=\"nodex\" id={id}>\n          {txt}\n        </div>\n      </Draggable>\n    </div>\n  );\n};\n\nexport default function Graph() {\n  const [positions, setPosition] = useState({ id1: [100, 0] });\n  const handleDrag = (e, d) => {\n    const id = e.srcElement.id;\n    setPosition({\n      ...positions,\n      [id]: [d.lastX + d.deltaX, d.lastY + d.deltaY],\n    });\n  };\n\n  const order = useSelector((state) => state.blocks.order);\n  const txts = useSelector((state) => state.blocks.txts);\n\n  var c = 0;\n  const nodes = order.map((id) => {\n    if (id in positions) {\n      return Node(id, positions[id], txts[id], handleDrag);\n    }\n    c += 50;\n    return Node(id, [100, c], txts[id], handleDrag);\n  });\n\n  const connections = Connections(order);\n\n  return (\n    <div className=\"canvas\">\n      {nodes}\n      {connections}\n    </div>\n  );\n}\n","import './App.css';\nimport React from 'react';\nimport Blocks from './features/blocks/Blocks';\nimport HeaderButtons from './features/HeaderButtons/HeaderButtons';\nimport Graph from './features/graph/Graph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"graph\">{Graph()}</div>\n      <div className=\"right_panel\">\n        {HeaderButtons()}\n        {Blocks()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const ArgButtonsSlice = createSlice({\n  name: 'args',\n  initialState: {\n    connection_color: null, // color of current selected arrow type\n    tail_selected: false, // specifies if prior click was on valid node\n    tail_id: null, // id of prior node click\n  },\n  reducers: {\n    updateColor: (state, action) => {\n      state.connection_color = action.color;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n    updateTail: (state, action) => {\n      state.tail_selected = true;\n      state.tail_id = action.id;\n    },\n    resetToDragging: (state) => {\n      state.connection_color = null;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n  },\n});\n\nexport const {\n  updateColor,\n  updateTail,\n  resetToDragging,\n} = ArgButtonsSlice.actions;\nexport default ArgButtonsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport blocksReducer from '../features/blocks/BlocksSlice';\nimport ArgsButtonsReducer from '../features/ArgButtons/ArgButtonsSlice';\n\nexport default configureStore({\n  reducer: {\n    blocks: blocksReducer,\n    args: ArgsButtonsReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}