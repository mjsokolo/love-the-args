{"version":3,"sources":["features/blocks/Note.js","features/blocks/Text.js","features/blocks/Blocks.js","features/HeaderButtons/HeaderButtons.js","features/graph/Nodes.js","features/graph/SequentialPath.js","App.js","features/graph/Graph.js","reportWebVitals.js","features/ArgButtons/ArgButtonsSlice.js","app/store.js","features/blocks/BlocksReducer.js","index.js"],"names":["Note","dispatch","id","note","view","undefined","class","onSelect","type","payload","onChange","onClick","e","ctrlKey","metaKey","shiftKey","value","ToggleNoteButton","className","Text","txt","caretCounter","placeholder","document","activeElement","set","selectionStart","c","get","caret","Blocks","order","useSelector","state","blocks","present","txts","notes","views","initialValue","useState","trait","updateTrait","current","newValue","useTrait","useDispatch","map","MergeButton","SplitButton","TabOutButton","ActionCreators","redo","TabInButton","undo","Nodes","positions","position","handleDrag","d","srcElement","x","lastX","deltaX","y","lastY","deltaY","onStop","onDrag","defaultPosition","Node","SequentialPath","links","i","length","path","Object","keys","forEach","key","push","start","end","strokeWidth","lineColor","dashness","headColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ArgButtonsSlice","createSlice","name","initialState","connection_color","tail_selected","tail_id","reducers","updateColor","action","color","updateTail","resetToDragging","actions","configureStore","reducer","undoable","activeId","id1","index","indexOf","id2","nanoid","textOne","substr","textTwo","newOrder","splice","pos","newPosition","idx","filter","excludeAction","args","ArgsButtonsReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.a314b15b.chunk.js","sourcesContent":["import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport './Blocks.css';\n\nfunction Note(dispatch, id, note, view) {\n  if (view === false || view === undefined) {\n    return <div></div>;\n  }\n  const n = (\n    <TextareaAutosize\n      id={id}\n      class=\"note\"\n      onSelect={() => dispatch({ type: 'updateNote', payload: { id: id } })}\n      onChange={() => dispatch({ type: 'updateNote', payload: { id: id } })}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch({ type: 'updateNote', payload: { id: id } });\n      }}\n      value={note}\n    />\n  );\n  return n;\n}\n\nfunction ToggleNoteButton(dispatch, id) {\n  const toggle = (\n    <label className=\"switch\">\n      <input\n        type=\"checkbox\"\n        onClick={() => dispatch({ type: 'toggleNote', payload: { id: id } })}\n      />\n      <span class=\"slider round\"></span>\n    </label>\n  );\n  return toggle;\n}\n\nexport { Note, ToggleNoteButton };\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport './Blocks.css';\n\nexport default function Text(dispatch, id, txt, caretCounter) {\n  const text = (\n    <TextareaAutosize\n      id={id}\n      class=\"text\"\n      placeholder=\"paste hebrew here\"\n      onSelect={() => {\n        const e = document.activeElement;\n        caretCounter.set(e.selectionStart);\n        const c = caretCounter.get();\n        dispatch({\n          type: 'updateId',\n          payload: {\n            id: id,\n            caret: c,\n          },\n        });\n      }}\n      onChange={() => {\n        const e = document.activeElement;\n        caretCounter.set(e.selectionStart);\n        dispatch({\n          type: 'updateText',\n          payload: {\n            id: id,\n            txt: document.activeElement.value,\n            caret: caretCounter.get(),\n          },\n        });\n      }}\n      // onClick={(e) => {\n      //   if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n      //   dispatch(updateCaret(100)); //updateOnSelect(id, dispatch); //dispatch(updateMouseAction(id));\n      // }}\n      value={txt}\n    />\n  );\n  return text;\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Note, ToggleNoteButton } from './Note';\nimport Text from './Text';\nimport './Blocks.css';\n\nfunction useTrait(initialValue) {\n  const [trait, updateTrait] = useState(initialValue);\n  let current = trait;\n  const get = () => current;\n  const set = (newValue) => {\n    current = newValue;\n    updateTrait(newValue);\n    return current;\n  };\n  return {\n    get,\n    set,\n  };\n}\n\nexport default function Blocks() {\n  const order = useSelector((state) => state.blocks.present.order);\n  const txts = useSelector((state) => state.blocks.present.txts);\n  const notes = useSelector((state) => state.blocks.present.notes);\n  const views = useSelector((state) => state.blocks.present.views);\n\n  const caretCounter = useTrait(0);\n  const dispatch = useDispatch();\n\n  const blocks = order.map((id) => (\n    <div class=\"cell\">\n      {ToggleNoteButton(dispatch, id)}\n      {Text(dispatch, id, txts[id], caretCounter)}\n      {Note(dispatch, id, notes[id], views[id])}\n    </div>\n  ));\n  return blocks;\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './HeaderButtons.css';\nimport { ActionCreators } from 'redux-undo';\n\nexport function MergeButton() {\n  const dispatch = useDispatch();\n  const mergeButton = (\n    <button type=\"button\" onClick={() => dispatch({ type: 'mergeText' })}>\n      merge\n    </button>\n  );\n  return mergeButton;\n}\n\nexport function SplitButton() {\n  const dispatch = useDispatch();\n  const splitButton = (\n    <button type=\"button\" onClick={() => dispatch({ type: 'splitText' })}>\n      split\n    </button>\n  );\n  return splitButton;\n}\n\nexport function TabOutButton() {\n  const dispatch = useDispatch();\n  const tabOutButton = (\n    <button type=\"button\" onClick={() => dispatch(ActionCreators.redo())}>\n      redo\n    </button>\n  );\n  return tabOutButton;\n}\n\nexport function TabInButton() {\n  const dispatch = useDispatch();\n  // const tabInButton = (\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        dispatch(ActionCreators.undo());\n        const x = () => {\n          console.log(useSelector((state) => state));\n          x();\n        };\n      }}\n    >\n      undo\n    </button>\n  );\n  // );\n  // return tabInButton;\n}\n\nexport default function HeaderButtons() {\n  return (\n    <div class=\"header_buttons\">\n      {TabInButton()}\n      {TabOutButton()}\n      {MergeButton()}\n      {SplitButton()}\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport Draggable from 'react-draggable';\nimport './Graph.css';\n\nconst Node = (id, position, txt, dispatch) => {\n  const handleDrag = (e, d) => {\n    const id = e.srcElement.id;\n    dispatch({\n      type: 'updatePosition',\n      payload: {\n        id: id,\n        x: d.lastX + d.deltaX,\n        y: d.lastY + d.deltaY,\n      },\n    });\n  };\n  const [x, y] = position;\n  return (\n    <div>\n      <Draggable\n        onStop={handleDrag}\n        onDrag={handleDrag}\n        key={id}\n        defaultPosition={{ x: x, y: y }}\n      >\n        <div className=\"nodex\" id={id}>\n          {txt}\n        </div>\n      </Draggable>\n    </div>\n  );\n};\n\nexport default function Nodes() {\n  const dispatch = useDispatch();\n  const positions = useSelector((state) => state.blocks.present.positions);\n  const order = useSelector((state) => state.blocks.present.order);\n  const txts = useSelector((state) => state.blocks.present.txts);\n\n  const nodes = order.map((id) => Node(id, positions[id], txts[id], dispatch));\n  return nodes;\n}\n","import { useSelector } from 'react-redux';\nimport React from 'react';\nimport Xarrow from 'react-xarrows';\nimport './Graph.css';\n\nexport default function SequentialPath() {\n  const order = useSelector((state) => state.blocks.present.order);\n\n  const links = {};\n  for (let i = 0; i < order.length - 1; i++) {\n    links[order[i]] = order[i + 1];\n  }\n\n  let path = [];\n  Object.keys(links).forEach((key) =>\n    path.push(\n      <Xarrow\n        start={key}\n        end={links[key]}\n        strokeWidth={1}\n        lineColor=\"grey\"\n        dashness={true}\n        headColor=\"grey\"\n      />\n    )\n  );\n  return path;\n}\n","import './App.css';\nimport React from 'react';\nimport Blocks from './features/blocks/Blocks';\nimport HeaderButtons from './features/HeaderButtons/HeaderButtons';\nimport Graph from './features/graph/Graph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"graph\">{Graph()}</div>\n      <div className=\"right_panel\">\n        {HeaderButtons()}\n        {Blocks()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './Graph.css';\nimport Nodes from './Nodes';\nimport SequentialPath from './SequentialPath';\n\nexport default function Graph() {\n  return (\n    <div className=\"canvas\">\n      {Nodes()}\n      {SequentialPath()}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const ArgButtonsSlice = createSlice({\n  name: 'args',\n  initialState: {\n    connection_color: null, // color of current selected arrow type\n    tail_selected: false, // specifies if prior click was on valid node\n    tail_id: null, // id of prior node click\n  },\n  reducers: {\n    updateColor: (state, action) => {\n      state.connection_color = action.color;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n    updateTail: (state, action) => {\n      state.tail_selected = true;\n      state.tail_id = action.id;\n    },\n    resetToDragging: (state) => {\n      state.connection_color = null;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n  },\n});\n\nexport const {\n  updateColor,\n  updateTail,\n  resetToDragging,\n} = ArgButtonsSlice.actions;\nexport default ArgButtonsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport undoable, { excludeAction } from 'redux-undo';\nimport blocksReducer from '../features/blocks/BlocksReducer';\nimport ArgsButtonsReducer from '../features/ArgButtons/ArgButtonsSlice';\n\nexport default configureStore({\n  reducer: {\n    blocks: undoable(blocksReducer, {\n      filter: excludeAction([\n        'updateId',\n        'updateCaret',\n        'updatePosition',\n        'toggleNote',\n        'updateNote',\n      ]),\n    }),\n    args: ArgsButtonsReducer,\n  },\n});\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport default function BlocksReducer(\n  state = {\n    caret: -1,\n    activeId: 'id1',\n    order: ['id1'],\n    txts: {\n      id1: '',\n    },\n    notes: { id1: '' },\n    views: { id1: false },\n    positions: { id1: [0, 0] },\n  },\n  action\n) {\n  switch (action.type) {\n    case 'updateId':\n      return {\n        ...state,\n        caret: action.payload.caret,\n        activeId: action.payload.id,\n      };\n    case 'updateText':\n      return {\n        ...state,\n        txts: { ...state.txts, [action.payload.id]: action.payload.txt },\n      };\n    case 'splitText': {\n      const id1 = state.activeId;\n      const index = state.order.indexOf(id1);\n      const id2 = nanoid();\n      const textOne = state.txts[id1].substr(0, state.caret);\n      const textTwo = state.txts[id1].substr(state.caret);\n      const newOrder = [...state.order];\n      newOrder.splice(index + 1, 0, id2);\n\n      const pos = state.positions[id1];\n      const newPosition = [pos[0], pos[1] + 50];\n      return {\n        ...state,\n        activeId: id2,\n        order: newOrder,\n        txts: { ...state.txts, [id1]: textOne, [id2]: textTwo },\n        notes: { ...state.notes, [id2]: '' },\n        views: { ...state.views, [id2]: false },\n        positions: { ...state.positions, [id2]: newPosition },\n      };\n    }\n    case 'mergeText': {\n      const id2 = state.activeId;\n      const idx = state.order.indexOf(id2);\n      if (idx === 0) {\n        return state; // not possible to merge up first block\n      }\n      const id1 = state.order[idx - 1];\n      const newOrder = [...state.order];\n      newOrder.splice(idx, 1);\n      return {\n        ...state,\n        activeId: id1,\n        order: newOrder,\n        txts: { ...state.txts, [id1]: state.txts[id1] + state.txts[id2] },\n        notes: {\n          ...state.notes,\n          [id1]: state.notes[id1] + state.notes[id2],\n        },\n      };\n    }\n    case 'toggleNote': {\n      const { id } = action.payload;\n      return { ...state, views: { ...state.views, [id]: !state.views[id] } };\n    }\n    case 'updateNote': {\n      const { id } = action.payload;\n      const e = document.activeElement;\n      return { ...state, notes: { ...state.notes, [id]: e.value } };\n    }\n    case 'updatePosition': {\n      const { id, x, y } = action.payload;\n      return { ...state, positions: { ...state.positions, [id]: [x, y] } };\n    }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}