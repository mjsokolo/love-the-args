{"version":3,"sources":["Chunk2.js","App.js","reportWebVitals.js","index.js"],"names":["Chunk2","props","state","caret","activeId","order","indents","id1","txts","totalChunks","handleTextChange","bind","handleSplit","handleMergeUp","handleTabOut","handleTabIn","id","e","document","activeElement","txt","value","replace","updatedTxts","this","setState","selectionStart","idx","indexOf","id2","textOne","substr","textTwo","newOrder","splice","prevState","type","onClick","map","class","style","marginRight","onSelect","onChange","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eab85ca9.chunk.js","sourcesContent":["import React from 'react';\nimport './Chunk.css';\nimport TextareaAutosize from 'react-autosize-textarea';\n// import Note from './Note';\n\nconst RenderChunks = (state, handleTextChange) => {\n  const chunks = state.order.map((id) => (\n    <TextareaAutosize\n      id={id}\n      class=\"chunk\"\n      style={{ marginRight: state.indents[id] * 10 }}\n      onSelect={() => {\n        handleTextChange(id);\n      }}\n      onChange={() => {\n        handleTextChange(id);\n      }}\n      onClick={() => {\n        handleTextChange(id);\n      }}\n      value={state.txts[id]}\n    />\n  ));\n  return chunks;\n};\n\nclass Chunk2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      caret: -1,\n      activeId: 'id1',\n      order: ['id1'],\n      indents: { id1: 0 },\n      txts: { id1: '' },\n    };\n    this.totalChunks = 1;\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleSplit = this.handleSplit.bind(this);\n    this.handleMergeUp = this.handleMergeUp.bind(this);\n    this.handleTabOut = this.handleTabOut.bind(this);\n    this.handleTabIn = this.handleTabIn.bind(this);\n  }\n\n  handleTextChange(id) {\n    // update text, caret, activeId\n    // preserve the \"\\n\" character\n    const e = document.activeElement;\n    const txt = e.value.replace(/\\n\\r?/g, '<br />');\n    // const updatedChunks = { ...this.state.chunks };\n    const updatedTxts = { ...this.state.txts, [id]: txt };\n    // updatedChunks[id].txt = txt;\n    this.setState({\n      txts: updatedTxts,\n      caret: e.selectionStart,\n      activeId: id,\n    });\n  }\n\n  handleSplit() {\n    const id = this.state.activeId;\n    const idx = this.state.order.indexOf(id);\n    this.totalChunks += 1;\n    const id2 = `id${this.totalChunks}`;\n    const caret = this.state.caret;\n    const textOne = this.state.txts[id].substr(0, caret);\n    const textTwo = this.state.txts[id].substr(caret);\n    const newOrder = [...this.state.order];\n    newOrder.splice(idx + 1, 0, id2);\n\n    this.setState((prevState) => ({\n      activeId: id2,\n      txts: { ...prevState.txts, [id]: textOne, [id2]: textTwo },\n      indents: { ...prevState.indents, [id2]: 0 },\n      order: newOrder,\n    }));\n  }\n\n  handleMergeUp() {\n    const id = this.state.activeId;\n    const idx = this.state.order.indexOf(id);\n    if (idx === 0) {\n      // not possible to merge up first chunk\n      return 0;\n    }\n    const id2 = this.state.order[idx - 1];\n    const txt = this.state.txts[id];\n    const newOrder = [...this.state.order];\n    newOrder.splice(idx, 1);\n\n    this.setState({\n      activeId: id2,\n      txts: { ...this.state.txts, [id2]: this.state.txts[id2] + txt },\n      indents: {\n        ...this.state.indents,\n        [id2]: this.state.indents[id2],\n        [id]: null,\n      },\n      order: newOrder,\n    });\n  }\n\n  handleTabOut() {\n    const id = this.state.activeId;\n    this.setState({\n      indents: { ...this.state.indents, [id]: this.state.indents[id] + 1 },\n    });\n  }\n\n  handleTabIn() {\n    const id = this.state.activeId;\n    this.setState({\n      indents: { ...this.state.indents, [id]: this.state.indents[id] - 1 },\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button type=\"button\" onClick={this.handleSplit}>\n          split\n        </button>\n        <button type=\"button\" onClick={this.handleMergeUp}>\n          merge up\n        </button>\n        <button type=\"button\" onClick={this.handleTabOut}>\n          &lt;&lt;&lt;\n        </button>\n        <button type=\"button\" onClick={this.handleTabIn}>\n          &gt;&gt;&gt;\n        </button>\n        {RenderChunks(this.state, this.handleTextChange)}\n        {this.state.caret}\n        {this.state.activeId}\n        {this.state.order}\n      </div>\n    );\n  }\n}\nexport default Chunk2;\n","// import logo from './logo.svg';\nimport './App.css';\nimport Chunk2 from './Chunk2';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\"> */}\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      {/* <ChunkCollection /> */}\n      {/* <Chunk txt=\"paste hebrew here\"/> */}\n      {/* {TestApp()} */}\n      <Chunk2 />\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}