{"version":3,"sources":["features/graph/GraphContextMenu.js","features/graph/ConnectionContextMenu.js","features/graph/ConnectionListener.js","features/blocks/Note.js","features/blocks/helpers.js","config/HistoricalStyles.js","features/blocks/Text.js","features/blocks/Blocks.js","features/HeaderButtons/HeaderButtons.js","features/graph/Nodes.js","features/graph/SequentialPath.js","features/graph/Connections.js","features/graph/Graph.js","features/HeaderButtons/DownloadButton.js","App.js","reportWebVitals.js","features/blocks/BlocksReducer.js","features/ArgButtons/ArgButtonsSlice.js","app/store.js","index.js"],"names":["MODES","מקרה","color","types","דין","טעם","כותרת","מעשה","כלל","אמירה","שאלה","תשובה","קושיא","תירוץ","ראיה","סיוע","אגדתא","אוקימתא","LAYOUT","Tannaitic","Talmud","NodeMenuId","GraphContextMenu","handleClick","event","data","element","target","label","type","dispatch","id","firstChild","payload","useDispatch","className","hideOnLeave","onClick","Object","keys","map","book","title","ConnectionMenuId","ConnectionContextMenu","reducerType","parentElement","returnNodeParent","document","classList","contains","parentNode","graph","selectedNode","connections","includes","connection","mode","ConnectionListener","useSelector","state","blocks","present","useEffect","f","e","addEventListener","removeEventListener","Note","note","notes","view","views","undefined","onSelect","onChange","ctrlKey","metaKey","shiftKey","value","ToggleNoteButton","checked","uncheckedIcon","checkedIcon","onColor","onHandleColor","offColor","boxShadow","activeBoxShadow","height","width","splitState","caret","getSelection","getAnchorOffset","end","getCurrentContent","getPlainText","length","currentBlockKey","getAnchorKey","lastBlockKey","getLastBlock","key","firstBlockKey","getFirstBlock","selectionSlice1","SelectionState","createEmpty","merge","anchorKey","anchorOffset","focusOffset","focusKey","selectionSlice2","contentSlice2","Modifier","removeRange","contentSlice1","slice1","JSON","stringify","convertToRaw","slice2","getSelectionInfo","selection","getFocusKey","getFocusOffset","isBackward","createSelection","TANNA","backgroundColor","AMORA","STAM","AMORA_MIDRASH","borderBottom","STAM_MIDRASH","STAM_AMORA","TANAKH","fontWeight","CLEAR","TextField","txt","txts","selectionInfo","selections","editorState","EditorState","createWithContent","convertFromRaw","parse","reduxEditorState","forceSelection","useState","localEditorState","setEditorState","activeId","editor","useRef","current","focus","onBlur","ref","customStyleMap","HistoricalStyles","justSelection","split","Blocks","order","removeInlineStyles","styles","contentState","contentWithoutStyles","reduce","newContentState","style","removeInlineStyle","push","allStyles","primaryStyles","MergeButton","onMouseDown","preventDefault","activeElement","getAttribute","SplitButton","RedoButton","ActionCreators","redo","UndoButton","undo","HistoricalLayerButton","props","dataStyle","data-style","onMouseUp","currentTarget","newSelectionState","newEditorState","acceptSelection","originalContentHash","getBlockMap","clearer","layerable","removePrimaryInLineStyles","RichUtils","toggleInlineStyle","getKey","name","HeaderButtons","Node","position","positions","boxes","borderColor","border","handleDrag","d","x","lastX","deltaX","y","lastY","deltaY","holdToDisplay","onStop","onDrag","defaultPosition","bounds","left","top","readOnly","Nodes","SequentialPath","links","i","path","forEach","start","strokeWidth","lineColor","headColor","dashness","NodeConnections","anchors","hasOwnProperty","sideStartOffset","sideEndOffset","console","log","startAnchor","offset","bottomness","rightness","endAnchor","headSize","arrowBodyProps","arrowHeadProps","SVGcanvasProps","middle","transform","Graph","SaveState","s","setName","onSubmit","evt","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","downloadObjectAsJson","LoadState","file","getElementById","files","reader","FileReader","readAsText","onload","result","App","handle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","id1","splits","ArgButtonsSlice","createSlice","connection_color","tail_selected","tail_id","reducers","updateColor","action","updateTail","resetToDragging","actions","configureStore","reducer","undoable","updatedPositions","xoffset","previous","Math","min","yoffset","index","indexOf","id2","nanoid","textOne","textTwo","newOrder","splice","textOneLength","textTwoLength","newNode1Height","getElementsByClassName","namedItem","clientHeight","pos","newPosition","currentPositions","values","filter","p","idx","newConnections","Set","array","join","contentState1","contentState2","selectionState2","insertionSelectionState","mergedContent","replaceWithFragment","c","toString","excludeAction","args","ArgsButtonsReducer","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.5ce1669c.chunk.js","sourcesContent":["import React from 'react';\nimport './css/GraphContextMenu.css';\nimport { ContextMenu, MenuItem, SubMenu } from 'react-contextmenu';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const MODES = {\n  מקרה: { color: '#222255', types: ['arrow', 'box'] },\n  דין: { color: '#222255', types: ['arrow'] },\n  טעם: { color: '#222255', types: ['arrow'] },\n  כותרת: { color: '#222255', types: ['arrow', 'box'] },\n  מעשה: { color: '#222255', types: ['arrow', 'box'] },\n  כלל: { color: '#222255', types: ['arrow', 'box'] },\n  אמירה: { color: '#ee6677', types: ['arrow', 'box'] },\n  שאלה: { color: '#ee6677', types: ['arrow', 'box'] },\n  תשובה: { color: '#ee6677', types: ['arrow'] },\n  קושיא: { color: '#ee6677', types: ['arrow'] },\n  תירוץ: { color: '#ee6677', types: ['arrow'] },\n  ראיה: { color: '#ee6677', types: ['arrow'] },\n  סיוע: { color: '#ee6677', types: ['arrow'] },\n  אגדתא: { color: '#ee6677', types: ['arrow', 'box'] },\n  אוקימתא: { color: '#ee6677', types: ['arrow'] },\n};\n\nconst LAYOUT = {\n  Tannaitic: ['מקרה', 'דין', 'טעם', 'כותרת', 'מעשה', 'אוקימתא', 'כלל'],\n  Talmud: [\n    'אמירה',\n    'שאלה',\n    'תשובה',\n    'קושיא',\n    'תירוץ',\n    'ראיה',\n    'סיוע',\n    'אגדתא',\n    'אוקימתא',\n  ],\n};\n\nexport const NodeMenuId = 'node_menu';\n\nexport default function GraphContextMenu() {\n  // updates State and changes cursor color\n  const handleClick = (event, data, element) => {\n    const { target, label, type, dispatch } = data;\n    const { id } = element.firstChild;\n    // document.body.style.cursor = `url(${cursor}), auto`;\n    if (type === 'arrow') {\n      dispatch({ type: 'setMode', payload: { label, id } });\n    } else {\n      dispatch({ type: 'setBox', payload: { label, id } });\n    }\n  };\n\n  const removeBox = (event, data, element) => {\n    const { target, dispatch } = data;\n    const { id } = element.firstChild;\n    dispatch({ type: 'removeBox', payload: { id } });\n  };\n  const dispatch = useDispatch();\n\n  return (\n    <ContextMenu id={NodeMenuId} className=\"context-menu\" hideOnLeave>\n      <MenuItem onClick={removeBox} data={{ dispatch }} key={'remove'}>\n        {'Remove Box'}\n      </MenuItem>\n\n      {Object.keys(LAYOUT).map((book) => (\n        <SubMenu title={book} key={book}>\n          {LAYOUT[book].map((label) => (\n            <SubMenu title={label} key={label}>\n              {MODES[label].types.map((type) => (\n                <MenuItem\n                  onClick={handleClick}\n                  data={{ label, type, dispatch }}\n                  key={type}\n                >\n                  {type}\n                </MenuItem>\n              ))}\n            </SubMenu>\n          ))}\n        </SubMenu>\n      ))}\n    </ContextMenu>\n  );\n}\n","import React from 'react';\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\nimport { useDispatch } from 'react-redux';\n\nexport const ConnectionMenuId = 'connection_menu';\n\nexport default function ConnectionContextMenu() {\n  // updates State and changes cursor color\n  const handleClick = (event, data, element) => {\n    const { target, reducerType, dispatch } = data;\n    const { id } = target.parentElement.parentElement;\n    dispatch({ type: reducerType, payload: {id}  });\n  };\n  const dispatch = useDispatch();\n  return (\n    <ContextMenu id={ConnectionMenuId}>\n        <MenuItem\n          onClick={handleClick}\n          data={{reducerType: \"deleteConnection\", dispatch: dispatch}}\n          key='deleteConnection'\n          >\n          {\"Delete\"}\n        </MenuItem>\n    </ContextMenu>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction returnNodeParent(target) {\n  // returns closest parent of target if\n  // if parent is class 'node' or 'react-contextmenu-item\n  if (target === document) {\n    return false;\n  }\n  if (target.classList.contains('react-contextmenu-item')) {\n    return target;\n  }\n  if (target.classList.contains('node')) {\n    return target;\n  }\n  return returnNodeParent(target.parentNode);\n}\n\nfunction onClick(event, graph, dispatch) {\n  const target = returnNodeParent(event.target);\n\n  if (target === false) {\n    dispatch({ type: 'resetMode' });\n  } else if (target.classList[0] === 'react-contextmenu-item') {\n    // Entered Connection Mode\n  } else if (target.classList[0] === 'node') {\n    if (graph.selectedNode !== null) {\n      // console.log('In Connection Mode');\n      if (graph.selectedNode === target.id) {\n        // console.log('Same ID Clicked');\n      } else if (graph.connections.includes([graph.selectedNode, target.id])) {\n        // console.log('Connection Already in Present');\n      } else {\n        dispatch({\n          type: 'addConnection',\n          payload: {\n            connection: [graph.selectedNode, target.id, graph.mode],\n          },\n        });\n      }\n    }\n    dispatch({ type: 'resetMode' });\n  }\n}\n\nexport default function ConnectionListener() {\n  const graph = useSelector((state) => state.blocks.present.graph);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    function f(e) {\n      return onClick(e, graph, dispatch);\n    }\n    document.addEventListener('click', f);\n    return () => {\n      document.removeEventListener('click', f);\n    };\n  }, [graph]);\n  return <></>;\n}\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport './Blocks.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Switch from 'react-switch';\n\nfunction Note({ id }) {\n  const note = useSelector((state) => state.blocks.present.notes[id]);\n  const view = useSelector((state) => state.blocks.present.views[id]);\n  const dispatch = useDispatch();\n  if (view === false || view === undefined) {\n    return <div />;\n  }\n  return (\n    <TextareaAutosize\n      id={id}\n      className=\"note\"\n      onSelect={() => dispatch({ type: 'updateNote', payload: { id } })}\n      onChange={() => dispatch({ type: 'updateNote', payload: { id } })}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch({ type: 'updateNote', payload: { id } });\n      }}\n      value={note}\n    />\n  );\n}\n\nfunction ToggleNoteButton({ id }) {\n  const checked = useSelector((state) => state.blocks.present.views[id]);\n  const dispatch = useDispatch();\n  return (\n    <Switch\n      checked={checked}\n      onChange={() => dispatch({ type: 'toggleNote', payload: { id } })}\n      uncheckedIcon={false}\n      checkedIcon={false}\n      className=\"switch\"\n      onColor=\"#222255\"\n      onHandleColor=\"#ffffff\"\n      offColor=\"#888888\"\n      boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n      activeBoxShadow=\"0px 0px 1px 1px rgba(0, 0, 0, 0.2)\"\n      height={10}\n      width={20}\n    />\n  );\n}\n\nexport { Note, ToggleNoteButton };\n","import { SelectionState, Modifier, convertToRaw } from 'draft-js';\n\nexport function splitState(state) {\n  const caret = state.getSelection().getAnchorOffset();\n  const end = state.getCurrentContent().getPlainText().length;\n\n  const currentBlockKey = state.getSelection().getAnchorKey();\n  const lastBlockKey = state.getCurrentContent().getLastBlock().key;\n  const firstBlockKey = state.getCurrentContent().getFirstBlock().key;\n\n  const selectionSlice1 = SelectionState.createEmpty('blockkey').merge({\n    anchorKey: currentBlockKey,\n    anchorOffset: caret,\n    focusOffset: end,\n    focusKey: lastBlockKey,\n  });\n  const selectionSlice2 = SelectionState.createEmpty('blockkey').merge({\n    anchorKey: firstBlockKey,\n    anchorOffset: 0,\n    focusKey: currentBlockKey,\n    focusOffset: caret,\n  });\n\n  const contentSlice2 = Modifier.removeRange(\n    state.getCurrentContent(),\n    selectionSlice2,\n    'forward'\n  );\n  const contentSlice1 = Modifier.removeRange(\n    state.getCurrentContent(),\n    selectionSlice1,\n    'forward'\n  );\n\n  return {\n    slice1: JSON.stringify(convertToRaw(contentSlice1)),\n    slice2: JSON.stringify(convertToRaw(contentSlice2)),\n  };\n}\n\nexport function getSelectionInfo(state) {\n  const selection = state.getSelection();\n  return {\n    anchorKey: selection.getAnchorKey(),\n    anchorOffset: selection.getAnchorOffset(),\n    focusKey: selection.getFocusKey(),\n    focusOffset: selection.getFocusOffset(),\n    isBackward: selection.isBackward,\n  };\n}\n\nexport function createSelection({\n  anchorKey,\n  anchorOffset,\n  focusKey,\n  focusOffset,\n  isBackward,\n}) {\n  return SelectionState.createEmpty('blockkey').merge({\n    anchorKey,\n    anchorOffset,\n    focusKey,\n    focusOffset,\n    isBackward,\n  });\n}\n","export default {\n  TANNA: {\n    backgroundColor: '#BBCCEE',\n  },\n  AMORA: {\n    backgroundColor: '#ccddaa',\n  },\n  STAM: {\n    backgroundColor: '#ffcccc',\n  },\n  AMORA_MIDRASH: {\n    backgroundColor: '#BBCCEE',\n    borderBottom: '.2em solid #228833',\n  },\n  STAM_MIDRASH: {\n    backgroundColor: '#BBCCEE',\n    borderBottom: '.2em solid #ee6677',\n  },\n  STAM_AMORA: {\n    backgroundColor: '#ccddaa',\n    borderBottom: '.2em solid #ee6677',\n  },\n  TANAKH: {\n    fontWeight: 'bold',\n  },\n  CLEAR: {\n    color: 'black',\n  },\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Editor,\n  EditorState,\n  convertToRaw,\n  convertFromRaw,\n  SelectionState,\n} from 'draft-js';\nimport { splitState, getSelectionInfo, createSelection } from './helpers';\nimport './Blocks.css';\nimport HistoricalStyles from '../../config/HistoricalStyles';\n\nexport default function TextField({ id }) {\n  const txt = useSelector((state) => state.blocks.present.txts[id]);\n  const dispatch = useDispatch();\n  const selectionInfo = useSelector(\n    (state) => state.blocks.present.selections[id]\n  );\n  // Fetch & Create editor state\n  const editorState = EditorState.createWithContent(\n    convertFromRaw(JSON.parse(txt))\n  );\n  // Fetch & Create selection\n  let selection = null;\n  if (selectionInfo == null) {\n    selection = SelectionState.createEmpty();\n  } else {\n    selection = createSelection(selectionInfo);\n  }\n  // Create editor state with selection & local state\n  const reduxEditorState = EditorState.forceSelection(editorState, selection);\n  const [localEditorState, setEditorState] = useState(() =>\n    EditorState.forceSelection(editorState, selection)\n  );\n  // Force local state to always be reduxEditorState on rerender\n  if (\n    txt !== JSON.stringify(convertToRaw(localEditorState.getCurrentContent()))\n  ) {\n    setEditorState(reduxEditorState);\n  }\n  // Force focus after render if active\n  const activeId = useSelector((state) => state.blocks.present.activeId);\n  const editor = useRef();\n  useEffect(() => {\n    if (activeId === id) {\n      editor.current.focus();\n    }\n  });\n\n  return (\n    <>\n      <div\n        className=\"text_editor\"\n        id={id}\n        onBlur={() =>\n          dispatch({\n            type: 'updateId',\n            payload: {\n              id: null,\n            },\n          })\n        }\n      >\n        <Editor\n          ref={editor}\n          customStyleMap={HistoricalStyles}\n          editorState={localEditorState}\n          onChange={(state) => {\n            const justSelection =\n              state.getCurrentContent().getPlainText() ===\n              localEditorState.getCurrentContent().getPlainText();\n            setEditorState(state);\n            if (justSelection) {\n              // UpdateSelection action is excluded from undo/redo\n              dispatch({\n                type: 'updateSelection',\n                payload: {\n                  id,\n                  split: splitState(state),\n                  selection: getSelectionInfo(state),\n                },\n              });\n            } else {\n              dispatch({\n                type: 'updateText',\n                payload: {\n                  id,\n                  txt: JSON.stringify(convertToRaw(state.getCurrentContent())),\n                  split: splitState(state),\n                  selection: getSelectionInfo(state),\n                },\n              });\n            }\n          }}\n        />\n      </div>\n    </>\n  );\n}\nTextField.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Note, ToggleNoteButton } from './Note';\nimport TextField from './Text';\nimport './Blocks.css';\n\nexport default function Blocks() {\n  const order = useSelector((state) => state.blocks.present.order);\n\n  const blocks = order.map((id) => (\n    <div className=\"block\" key={id}>\n      <TextField id={id} />\n      <ToggleNoteButton id={id} />\n      <Note id={id} />\n    </div>\n  ));\n  return blocks;\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './HeaderButtons.css';\nimport { ActionCreators } from 'redux-undo';\nimport {\n  EditorState,\n  RichUtils,\n  convertFromRaw,\n  convertToRaw,\n  Modifier,\n} from 'draft-js';\nimport {\n  splitState,\n  createSelection,\n  getSelectionInfo,\n} from '../blocks/helpers';\nimport HistoricalStyles from '../../config/HistoricalStyles';\n\nconst removeInlineStyles = (editorState, styles) => {\n  const contentState = editorState.getCurrentContent();\n  const contentWithoutStyles = styles.reduce(\n    (newContentState, style) =>\n      Modifier.removeInlineStyle(\n        newContentState,\n        editorState.getSelection(),\n        style\n      ),\n    contentState\n  );\n\n  const newEditorState = EditorState.push(\n    editorState,\n    contentWithoutStyles,\n    'change-inline-style'\n  );\n\n  return newEditorState;\n};\n\nconst allStyles = [\n  'TANNA',\n  'AMORA',\n  'AMORA_MIDRASH',\n  'STAM',\n  'STAM_MIDRASH',\n  'STAM_AMORA',\n  'CLEAR',\n  'TANAKH',\n];\n\nconst primaryStyles = [\n  'TANNA',\n  'AMORA',\n  'AMORA_MIDRASH',\n  'STAM',\n  'STAM_MIDRASH',\n  'STAM_AMORA',\n  'CLEAR',\n];\nconst clearAllInLineStyles = (editorState) =>\n  removeInlineStyles(editorState, allStyles);\nconst removePrimaryInLineStyles = (editorState) =>\n  removeInlineStyles(editorState, primaryStyles);\n\nexport function MergeButton() {\n  const dispatch = useDispatch();\n  return (\n    <button\n      type=\"button\"\n      onMouseDown={(event) => {\n        event.preventDefault();\n        if (\n          // verify active element is a Textfield Component\n          document.activeElement.getAttribute('class') !==\n          'notranslate public-DraftEditor-content'\n        ) {\n          return;\n        }\n        const {\n          id,\n        } = document.activeElement.parentElement.parentElement.parentElement;\n        dispatch({ type: 'mergeText', payload: { id } });\n      }}\n    >\n      merge\n    </button>\n  );\n}\n\nexport function SplitButton() {\n  const dispatch = useDispatch();\n  return (\n    <button\n      type=\"button\"\n      onMouseDown={(event) => {\n        event.preventDefault();\n        if (\n          // verify active element is a Textfield Component\n          document.activeElement.getAttribute('class') !==\n          'notranslate public-DraftEditor-content'\n        ) {\n          return;\n        }\n        const {\n          id,\n        } = document.activeElement.parentElement.parentElement.parentElement;\n        dispatch({ type: 'splitText', payload: { id } });\n      }}\n    >\n      split\n    </button>\n  );\n}\n\nexport function RedoButton() {\n  const dispatch = useDispatch();\n  return (\n    <button type=\"button\" onClick={() => dispatch(ActionCreators.redo())}>\n      redo\n    </button>\n  );\n}\n\nexport function UndoButton() {\n  const dispatch = useDispatch();\n  // const UndoButton = (\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        dispatch(ActionCreators.undo());\n      }}\n    >\n      undo\n    </button>\n  );\n}\n\nexport function HistoricalLayerButton(props) {\n  const dispatch = useDispatch();\n  const txts = useSelector((state) => state.blocks.present.txts);\n  const selections = useSelector((state) => state.blocks.present.selections);\n  return (\n    <button\n      style={HistoricalStyles[props.dataStyle]}\n      type=\"button\"\n      data-style={props.dataStyle}\n      onMouseUp={(event) => event.preventDefault()}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        if (\n          // verify active element is a Textfield Component\n          document.activeElement.getAttribute('class') !==\n          'notranslate public-DraftEditor-content'\n        ) {\n          return;\n        }\n        const style = event.currentTarget.getAttribute('data-style');\n        const {\n          id,\n        } = document.activeElement.parentElement.parentElement.parentElement;\n\n        const contentState = convertFromRaw(JSON.parse(txts[id]));\n        let newSelectionState = createSelection(selections[id]);\n        let newEditorState = EditorState.createWithContent(contentState);\n        newEditorState = EditorState.acceptSelection(\n          newEditorState,\n          newSelectionState\n        );\n\n        const originalContentHash = JSON.stringify(\n          newEditorState.getCurrentContent().getBlockMap()\n        );\n\n        // inline style handing logic\n        if (props.clearer) {\n          newEditorState = clearAllInLineStyles(newEditorState);\n        } else if (props.layerable) {\n          // don't remove inline styles\n        } else {\n          newEditorState = removePrimaryInLineStyles(newEditorState);\n        }\n        newEditorState = RichUtils.toggleInlineStyle(newEditorState, style);\n\n        // check if the content styling would change.\n        // If it does, reset caret to 0\n        // and send update to redux store\n        const newContentHash = JSON.stringify(\n          newEditorState.getCurrentContent().getBlockMap()\n        );\n        if (originalContentHash != newContentHash) {\n          // saving original split before selection reset\n          const split = splitState(newEditorState);\n          // create reset caret selection\n          const key = newEditorState\n            .getCurrentContent()\n            .getFirstBlock()\n            .getKey();\n          newSelectionState = createSelection({\n            anchorKey: key,\n            anchorOffset: 0,\n            focusKey: key,\n            focusOffset: 0,\n            isBackward: false,\n          });\n          // force new selection\n          newEditorState = EditorState.forceSelection(\n            newEditorState,\n            newSelectionState\n          );\n          // dispatch update\n          dispatch({\n            type: 'updateText',\n            payload: {\n              id,\n              txt: JSON.stringify(\n                convertToRaw(newEditorState.getCurrentContent())\n              ),\n              split,\n              selection: getSelectionInfo(newEditorState),\n            },\n          });\n        }\n      }}\n    >\n      {props.name}\n    </button>\n  );\n}\n\nexport default function HeaderButtons() {\n  return (\n    <div className=\"header_buttons\">\n      <UndoButton />\n      <RedoButton />\n      <MergeButton />\n      <SplitButton />\n      <HistoricalLayerButton dataStyle=\"TANNA\" name=\"Tannaitic\" />\n      <HistoricalLayerButton dataStyle=\"AMORA\" name=\"Amoraic\" />\n      <HistoricalLayerButton dataStyle=\"STAM\" name=\"Stam\" />\n      <HistoricalLayerButton dataStyle=\"AMORA_MIDRASH\" name=\"T from A\" />\n      <HistoricalLayerButton dataStyle=\"STAM_MIDRASH\" name=\"T from S\" />\n      <HistoricalLayerButton dataStyle=\"STAM_AMORA\" name=\"A from S\" />\n      <HistoricalLayerButton\n        dataStyle=\"TANAKH\"\n        name=\"Tanakh\"\n        layerable={true}\n      />\n      <HistoricalLayerButton dataStyle=\"CLEAR\" name=\"Clear\" clearer={true} />\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { convertFromRaw, Editor, EditorState } from 'draft-js';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport React from 'react';\nimport Draggable from 'react-draggable';\nimport { NodeMenuId, MODES } from './GraphContextMenu';\nimport './css/Nodes.css';\nimport HistoricalStyles from '../../config/HistoricalStyles';\n\nconst Node = (props) => {\n  const { id } = props;\n  const dispatch = useDispatch();\n  const position = useSelector((state) => state.blocks.present.positions[id]);\n  const txt = useSelector((state) => state.blocks.present.txts[id]);\n  const label = useSelector((state) => state.blocks.present.graph.boxes[id]);\n  const selectedNode = useSelector(\n    (state) => state.blocks.present.graph.selectedNode\n  );\n  let style = {};\n  if (selectedNode === id) {\n    style = { borderColor: 'gold', backgroundColor: 'gold' };\n  }\n\n  // determines style for border of node\n  let border = '';\n  if (label) {\n    border = MODES[label].color;\n    style.borderColor = border;\n  } else {\n    border = '';\n  }\n  const handleDrag = (e, d) => {\n    dispatch({\n      type: 'updatePosition',\n      payload: {\n        id,\n        x: d.lastX + d.deltaX,\n        y: d.lastY + d.deltaY,\n      },\n    });\n  };\n  const [x, y] = position;\n  return (\n    <ContextMenuTrigger id={NodeMenuId} key={id} holdToDisplay={-1}>\n      <Draggable\n        onStop={handleDrag}\n        onDrag={handleDrag}\n        key={id}\n        defaultPosition={{ x, y }}\n        position={{ x, y }}\n        bounds={{ left: 0, top: 0 }}\n      >\n        <fieldset className=\"node\" id={id} style={style}>\n          <legend className=\"label\" style={{ color: border }}>\n            {label}\n          </legend>\n          <Editor\n            readOnly\n            customStyleMap={HistoricalStyles}\n            editorState={EditorState.createWithContent(\n              convertFromRaw(JSON.parse(txt))\n            )}\n            onChange={() => {}}\n          />\n        </fieldset>\n      </Draggable>\n    </ContextMenuTrigger>\n  );\n};\n\nexport default function Nodes() {\n  const order = useSelector((state) => state.blocks.present.order);\n  const nodes = order.map((id) => <Node id={id} key={id} />);\n  return nodes;\n}\n","import { useSelector } from 'react-redux';\nimport React from 'react';\nimport Xarrow from 'react-xarrows';\n\nexport default function SequentialPath() {\n  const order = useSelector((state) => state.blocks.present.order);\n  // triggers re-render on state change\n  const positions = useSelector((state) => state.blocks.present.positions);\n\n  const links = {};\n  for (let i = 0; i < order.length - 1; i += 1) {\n    links[order[i]] = order[i + 1];\n  }\n\n  const path = [];\n  Object.keys(links).forEach((key) =>\n    path.push(\n      <Xarrow\n        key={key}\n        start={key}\n        end={links[key]}\n        strokeWidth={1}\n        lineColor=\"grey\"\n        headColor=\"grey\"\n        dashness\n      />\n    )\n  );\n  return path;\n}\n","import { useSelector } from 'react-redux';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport React from 'react';\nimport Xarrow from 'react-xarrows';\nimport { MODES } from './GraphContextMenu';\nimport { ConnectionMenuId } from './ConnectionContextMenu';\nimport './css/Connections.css';\n\nexport default function NodeConnections() {\n  const connections = useSelector(\n    (state) => state.blocks.present.graph.connections\n  );\n  // triggers re-render on state change\n  const positions = useSelector((state) => state.blocks.present.positions);\n  const anchors = {};\n  return connections.map((connection) => {\n    const start = connection[0];\n    const end = connection[1];\n    const mode = connection[2];\n\n    anchors.hasOwnProperty(start)\n      ? (anchors[start] += 1)\n      : (anchors[start] = 1);\n    anchors.hasOwnProperty(end) ? (anchors[end] += 1) : (anchors[end] = 1);\n    // start and end offsets begin at index 1 (leaves room for sequential path)\n\n    // console.log(anchors);\n    let sideStartOffset = anchors[start];\n    if (sideStartOffset % 2 === 0) {\n      sideStartOffset /= -2;\n    } else {\n      sideStartOffset += 1;\n      sideStartOffset /= 2;\n    }\n    let sideEndOffset = anchors[end];\n    if (sideEndOffset % 2 === 0) {\n      sideEndOffset /= -2;\n    } else {\n      sideEndOffset += 1;\n      sideEndOffset /= 2;\n    }\n    // console.log(anchors)\n\n    const longStartOffset = anchors[start];\n\n    const yspacing = 10;\n    const xspacing = 10;\n    console.log(mode, MODES);\n\n    return (\n      <ContextMenuTrigger id={ConnectionMenuId} key={start + end + mode}>\n        <Xarrow\n          key={start + end + mode}\n          id={start + end + mode}\n          start={start}\n          end={end}\n          startAnchor={[\n            {\n              position: 'right',\n              offset: { bottomness: yspacing * sideStartOffset, rightness: 0 },\n            },\n            {\n              position: 'left',\n              offset: { bottomness: yspacing * sideStartOffset, rightness: 0 },\n            },\n            {\n              position: 'bottom',\n              offset: { bottomness: 0, rightness: xspacing * sideStartOffset },\n            },\n            {\n              position: 'top',\n              offset: { bottomness: 0, rightness: xspacing * sideStartOffset },\n            },\n          ]}\n          endAnchor={[\n            {\n              position: 'right',\n              offset: { bottomness: yspacing * sideEndOffset, rightness: 0 },\n            },\n            {\n              position: 'left',\n              offset: { bottomness: yspacing * sideEndOffset, rightness: 0 },\n            },\n            {\n              position: 'bottom',\n              offset: { bottomness: 0, rightness: xspacing * sideEndOffset },\n            },\n            {\n              position: 'top',\n              offset: { bottomness: 0, rightness: xspacing * sideEndOffset },\n            },\n          ]}\n          strokeWidth={2}\n          headSize={3}\n          lineColor={MODES[mode].color}\n          headColor={MODES[mode].color}\n          arrowBodyProps={{ className: 'arrow_body' }}\n          arrowHeadProps={{ className: 'arrow_head' }}\n          SVGcanvasProps={{ className: 'svg' }}\n          // path=\"grid\"\n          label={{\n            middle: (\n              <div\n                className=\"arrow_label\"\n                style={{\n                  color: MODES[mode].color,\n                  transform: 'translate(100%, 0%)',\n                }}\n              >\n                {mode[0]}\n              </div>\n            ),\n          }}\n        />\n      </ContextMenuTrigger>\n    );\n  });\n}\n","import React from 'react';\nimport './css/Graph.css';\nimport Nodes from './Nodes';\nimport SequentialPath from './SequentialPath';\nimport NodeConnections from './Connections';\n\nexport default function Graph() {\n  return (\n    <>\n      <Nodes />\n      <SequentialPath />\n      <NodeConnections />\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './DownloadButton.css';\n\nfunction downloadObjectAsJson(exportObj, exportName) {\n  let dataStr =\n    'data:text/json;charset=utf-8,' +\n    encodeURIComponent(JSON.stringify(exportObj));\n  let downloadAnchorNode = document.createElement('a');\n  downloadAnchorNode.setAttribute('href', dataStr);\n  downloadAnchorNode.setAttribute('download', exportName + '.json');\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n}\n\nexport function SaveState() {\n  const s = useSelector((state) => state.blocks.present);\n  // const positions = useSelector((state) => state.blocks.present.positions);\n  const [name, setName] = useState('');\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    downloadObjectAsJson(s, name);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {'Save File '}\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Save\" />\n    </form>\n  );\n}\n\nexport function LoadState() {\n  const dispatch = useDispatch();\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    // console.log(file.name);\n    const file = document.getElementById('file').files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = function () {\n      const state = JSON.parse(reader.result);\n      console.log(state);\n      dispatch({\n        type: 'loadState',\n        payload: {\n          state,\n        },\n      });\n    };\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" id=\"file\" name=\"file\" className=\"inputfile\" />\n      {/* <label for=\"file\">Load File:</label> */}\n      <input type=\"submit\" value=\"Load\" />\n    </form>\n  );\n}\n","import './App.css';\nimport React from 'react';\nimport Draggable from 'react-draggable';\nimport GraphContextMenu from './features/graph/GraphContextMenu';\nimport ConnectionContextMenu from './features/graph/ConnectionContextMenu';\nimport ConnectionListener from './features/graph/ConnectionListener';\nimport Blocks from './features/blocks/Blocks';\nimport HeaderButtons from './features/HeaderButtons/HeaderButtons';\nimport Graph from './features/graph/Graph';\nimport { SaveState, LoadState } from './features/HeaderButtons/DownloadButton';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GraphContextMenu />\n      <ConnectionContextMenu />\n      <ConnectionListener />\n      <div className=\"top\">\n        <div className=\"load_save_buttons\">\n          <SaveState />\n          <LoadState />\n        </div>\n        <div className=\"right_buttons\">\n          <HeaderButtons />\n        </div>\n      </div>\n      <div className=\"bottom\">\n        <Draggable className=\"drag-wrap\" handle=\".drag-bar\">\n          <div className=\"left_panel\">\n            <div className=\"drag-bar\" />\n            <Graph />\n          </div>\n        </Draggable>\n        <div className=\"right_panel\">\n          <Blocks />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { nanoid } from '@reduxjs/toolkit';\nimport {\n  EditorState,\n  SelectionState,\n  convertToRaw,\n  convertFromRaw,\n  Modifier,\n} from 'draft-js';\n\nconst initialState = {\n  caret: -1,\n  activeId: 'id1',\n  order: ['id1'],\n  txts: {\n    id1: JSON.stringify(\n      convertToRaw(EditorState.createEmpty().getCurrentContent())\n    ),\n  },\n  splits: { id1: { slice1: 0, slice2: 0 } },\n  selections: {\n    id1: null,\n  },\n  notes: { id1: '' },\n  views: { id1: false },\n  positions: { id1: [0, 0] },\n  graph: { connections: [], mode: null, selectedNode: null, boxes: {} },\n};\n\nexport default function BlocksReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'loadState': {\n      const updatedPositions = action.payload.state.positions;\n\n      // Update node positions to avoid unaccesible nodes in Graph\n      const xoffset = Object.keys(updatedPositions).reduce(\n        (previous, key) => Math.min(updatedPositions[key][0], previous),\n        0\n      );\n      const yoffset = Object.keys(updatedPositions).reduce(\n        (previous, key) => Math.min(updatedPositions[key][1], previous),\n        0\n      );\n      Object.keys(updatedPositions).map((key, index) => {\n        updatedPositions[key] = [\n          updatedPositions[key][0] - xoffset,\n          updatedPositions[key][1] - yoffset,\n        ];\n        return updatedPositions;\n      });\n\n      return {\n        ...action.payload.state,\n        positions: updatedPositions,\n      };\n    }\n    case 'updateId':\n      return {\n        ...state,\n        activeId: action.payload.id,\n      };\n    case 'updateText':\n      return {\n        ...state,\n        txts: { ...state.txts, [action.payload.id]: action.payload.txt },\n        splits: { ...state.splits, [action.payload.id]: action.payload.split },\n        selections: {\n          ...state.selections,\n          [action.payload.id]: action.payload.selection,\n        },\n      };\n    case 'updateSelection':\n      return {\n        ...state,\n        activeId: action.payload.id,\n        splits: { ...state.splits, [action.payload.id]: action.payload.split },\n        selections: {\n          ...state.selections,\n          [action.payload.id]: action.payload.selection,\n        },\n      };\n    case 'splitText': {\n      // Initialize ids, texts, and order\n      const id1 = action.payload.id;\n      const index = state.order.indexOf(id1);\n      const id2 = nanoid();\n      const textOne = state.splits[id1]['slice1'];\n      const textTwo = state.splits[id1]['slice2'];\n      const newOrder = [...state.order];\n      newOrder.splice(index + 1, 0, id2);\n\n      // Set new position of node in graph\n      const textOneLength = convertFromRaw(JSON.parse(textOne)).getPlainText()\n        .length;\n      const textTwoLength = convertFromRaw(JSON.parse(textTwo)).getPlainText()\n        .length;\n\n      const OriginalNode1Height = document\n        .getElementsByClassName('node')\n        .namedItem(id1).clientHeight;\n\n      const newNode1Height =\n        (OriginalNode1Height * textOneLength) /\n        (textOneLength + textTwoLength + 0.01); // to prevent divisions by zero if text lengths are 0\n\n      const pos = state.positions[id1];\n      const newPosition = [pos[0], pos[1] + newNode1Height + 50];\n\n      // Updates new node position if new node is on top of existing node\n      const currentPositions = Object.values(state.positions);\n      let i = 0;\n      while (\n        currentPositions.filter(\n          (p) => JSON.stringify(p) === JSON.stringify(newPosition)\n        ).length > 0\n      ) {\n        i += 1;\n        newPosition[0] += 15;\n        newPosition[1] += 15;\n        if (i > 5) {\n          // Stops after five attempts to change position\n          break;\n        }\n      }\n\n      // Create and Return new state\n      return {\n        ...state,\n        activeId: id2,\n        order: newOrder,\n        txts: {\n          ...state.txts,\n          [id1]: textOne,\n          [id2]: textTwo,\n        },\n        splits: {\n          ...state.splits,\n          [id1]: { slice1: textOne, slice2: textOne },\n          [id2]: { slice1: textTwo, slice2: textTwo },\n        },\n        notes: { ...state.notes, [id2]: '' },\n        views: { ...state.views, [id2]: false },\n        positions: { ...state.positions, [id2]: newPosition },\n      };\n    }\n    case 'mergeText': {\n      const id2 = action.payload.id;\n      const idx = state.order.indexOf(id2);\n      if (idx === 0) {\n        return state; // not possible to merge up first block\n      }\n      const id1 = state.order[idx - 1];\n      const newOrder = [...state.order];\n      newOrder.splice(idx, 1);\n\n      // Move merged connections\n      let newConnections = state.graph.connections\n        .map((connection) =>\n          connection.map((id) => {\n            if (id === id2) {\n              return id1;\n            }\n            return id;\n          })\n        )\n        .filter((connection) => connection[0] !== connection[1]);\n      // Remove Duplicate connections\n      const s = new Set(newConnections.map((array) => array.join()));\n      newConnections = [...s].map((array) => array.split(','));\n\n      // Creates Merged Content State\n      const contentState1 = convertFromRaw(JSON.parse(state.txts[id1]));\n      const contentState2 = convertFromRaw(JSON.parse(state.txts[id2]));\n      const selectionState2 =\n        EditorState.createWithContent(contentState2).getSelection();\n      const firstBlockKey = selectionState2.getAnchorKey();\n      const insertionSelectionState = SelectionState.createEmpty(\n        'blockkey'\n      ).merge({\n        anchorKey: firstBlockKey,\n        anchorOffset: 0,\n        focusKey: firstBlockKey,\n        focusOffset: 0,\n      });\n      const mergedContent = Modifier.replaceWithFragment(\n        contentState2,\n        insertionSelectionState,\n        contentState1.getBlockMap()\n      );\n\n      return {\n        ...state,\n        activeId: id1,\n        order: newOrder,\n        txts: {\n          ...state.txts,\n          [id1]: JSON.stringify(convertToRaw(mergedContent)),\n        },\n        splits: {\n          ...state.splits,\n          [id1]: { slice1: 0, slice2: 0 },\n        },\n        notes: {\n          ...state.notes,\n          [id1]: state.notes[id1] + state.notes[id2],\n        },\n        graph: { ...state.graph, connections: newConnections },\n      };\n    }\n    case 'toggleNote': {\n      const { id } = action.payload;\n      return { ...state, views: { ...state.views, [id]: !state.views[id] } };\n    }\n    case 'updateNote': {\n      const { id } = action.payload;\n      const e = document.activeElement;\n      return { ...state, notes: { ...state.notes, [id]: e.value } };\n    }\n    case 'updatePosition': {\n      const { id, x, y } = action.payload;\n      return { ...state, positions: { ...state.positions, [id]: [x, y] } };\n    }\n    case 'setMode':\n      return {\n        ...state,\n        graph: {\n          ...state.graph,\n          mode: action.payload.label, // bad variables names\n          selectedNode: action.payload.id,\n        },\n      };\n    case 'resetMode':\n      return {\n        ...state,\n        graph: { ...state.graph, mode: null, selectedNode: null },\n        mode: '',\n        id: null,\n      };\n    case 'setBox': {\n      const { label, id } = action.payload;\n      return {\n        ...state,\n        graph: { ...state.graph, boxes: { ...state.graph.boxes, [id]: label } },\n      };\n    }\n    case 'removeBox': {\n      const { id } = action.payload;\n      const boxes = { ...state.graph.boxes };\n      delete boxes[id];\n      return {\n        ...state,\n        graph: { ...state.graph, boxes: { ...boxes } },\n      };\n    }\n    case 'addConnection':\n      // Verify that connection does not already exist\n      if (\n        state.graph.connections.filter(\n          (c) => c.toString() === action.payload.connection.toString()\n        ).length > 0 &&\n        state.graph.connections.length > 0\n      ) {\n        return state;\n      }\n      // Add connection\n      return {\n        ...state,\n        graph: {\n          ...state.graph,\n          connections: [...state.graph.connections, action.payload.connection],\n        },\n      };\n    case 'deleteConnection': {\n      const newConnections = state.graph.connections.filter(\n        (connection) =>\n          connection[0] + connection[1] + connection[2] !== action.payload.id\n      );\n      return {\n        ...state,\n        graph: { ...state.graph, connections: newConnections },\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const ArgButtonsSlice = createSlice({\n  name: 'args',\n  initialState: {\n    connection_color: null, // color of current selected arrow type\n    tail_selected: false, // specifies if prior click was on valid node\n    tail_id: null, // id of prior node click\n  },\n  reducers: {\n    updateColor: (state, action) => {\n      state.connection_color = action.color;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n    updateTail: (state, action) => {\n      state.tail_selected = true;\n      state.tail_id = action.id;\n    },\n    resetToDragging: (state) => {\n      state.connection_color = null;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n  },\n});\n\nexport const {\n  updateColor,\n  updateTail,\n  resetToDragging,\n} = ArgButtonsSlice.actions;\nexport default ArgButtonsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport undoable, { excludeAction } from 'redux-undo';\nimport blocksReducer from '../features/blocks/BlocksReducer';\nimport ArgsButtonsReducer from '../features/ArgButtons/ArgButtonsSlice';\n\nexport default configureStore({\n  reducer: {\n    blocks: undoable(blocksReducer, {\n      filter: excludeAction([\n        'updateId',\n        'updateCaret',\n        'updatePosition',\n        'toggleNote',\n        'updateNote',\n        'resetMode',\n        'setMode',\n        'updateSelection',\n      ]),\n    }),\n    args: ArgsButtonsReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}