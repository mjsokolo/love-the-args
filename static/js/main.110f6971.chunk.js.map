{"version":3,"sources":["features/blocks/GroupsContextMenu.js","features/graph/GraphContextMenu.js","features/graph/ConnectionContextMenu.js","features/graph/ConnectionListener.js","features/blocks/Note.js","features/blocks/helpers.js","config/HistoricalStyles.js","features/blocks/Text.js","features/blocks/Blocks.js","features/HeaderButtons/HeaderButtons.js","features/graph/helpers.js","features/graph/NodeLegend.js","features/graph/SingleNodes.js","features/graph/SequentialPath.js","features/graph/Connections.js","features/graph/GroupNodes.js","features/graph/Graph.js","features/HeaderButtons/DownloadButton.js","App.js","reportWebVitals.js","features/blocks/BlocksReducer.js","features/ArgButtons/ArgButtonsSlice.js","app/store.js","index.js"],"names":["GROUP_MENU_ID","extractIds","selected","document","getElementsByClassName","selectionSize","length","start","end","id","GroupContextMenu","dispatch","useDispatch","className","hideOnLeave","onClick","type","payload","MODES","מקרה","color","types","דין","טעם","כותרת","מעשה","כלל","אמירה","שאלה","תשובה","קושיא","תירוץ","ראיה","סיוע","אגדתא","אוקימתא","מחלוקת","LAYOUT","Tannaitic","Talmud","NODE_MENU_ID","REMOVE_BOX_MENU_ID","GraphContextMenu","handleClick","event","data","element","target","label","firstChild","Object","keys","map","book","title","RemoveBoxMenu","console","log","getAttribute","ConnectionMenuId","ConnectionContextMenu","reducerType","parentElement","returnNodeParent","classList","contains","parentNode","graph","selectedNode","connections","includes","connection","mode","ConnectionListener","useSelector","state","blocks","present","useEffect","f","e","addEventListener","removeEventListener","Note","note","notes","view","views","undefined","onSelect","onChange","ctrlKey","metaKey","shiftKey","value","ToggleNoteButton","checked","uncheckedIcon","checkedIcon","onColor","onHandleColor","offColor","boxShadow","activeBoxShadow","height","width","splitState","caret","getSelection","getAnchorOffset","getCurrentContent","getPlainText","currentBlockKey","getAnchorKey","lastBlockKey","getLastBlock","key","firstBlockKey","getFirstBlock","selectionSlice1","SelectionState","createEmpty","merge","anchorKey","anchorOffset","focusOffset","focusKey","selectionSlice2","contentSlice2","Modifier","removeRange","contentSlice1","slice1","JSON","stringify","convertToRaw","slice2","getSelectionInfo","selection","getFocusKey","getFocusOffset","isBackward","createSelection","TANNA","backgroundColor","AMORA","STAM","AMORA_MIDRASH","borderBottom","STAM_MIDRASH","STAM_AMORA","TANAKH","fontWeight","CLEAR","TextField","txt","txts","selectionInfo","selections","editorState","EditorState","createWithContent","convertFromRaw","parse","reduxEditorState","forceSelection","useState","localEditorState","setEditorState","activeId","editor","useRef","current","focus","onBlur","ref","customStyleMap","HistoricalStyles","justSelection","split","Blocks","order","Set","holdToDisplay","handle","bounds","top","dragContainer","selectableTargets","selectByClick","selectFromInside","continueSelect","toggleContinueSelect","hitRate","added","forEach","el","add","style","removed","remove","removeInlineStyles","styles","contentState","contentWithoutStyles","reduce","newContentState","removeInlineStyle","push","allStyles","primaryStyles","MergeButton","onMouseDown","preventDefault","activeElement","SplitButton","RedoButton","ActionCreators","redo","UndoButton","undo","HistoricalLayerButton","props","dataStyle","data-style","onMouseUp","currentTarget","newSelectionState","newEditorState","acceptSelection","originalContentHash","getBlockMap","clearer","layerable","removePrimaryInLineStyles","RichUtils","toggleInlineStyle","getKey","name","HeaderButtons","legendColor","boxLabels","connectionLabels","legends","concat","NodeLegend","boxes","filter","c","ArrowLegend","BoxLegend","boxLegend","Array","isArray","nodeid","nodelabel","arrowLegend","SingleNodes","SingleNode","position","positions","borderColor","handleDrag","d","x","lastX","deltaX","y","lastY","deltaY","onStop","onDrag","defaultPosition","left","readOnly","SequentialPath","links","groups","i","path","strokeWidth","lineColor","headColor","dashness","NodeConnections","anchors","hasOwnProperty","sideStartOffset","sideEndOffset","startAnchor","offset","bottomness","rightness","endAnchor","headSize","arrowBodyProps","arrowHeadProps","SVGcanvasProps","middle","borderStyle","borderWidth","borderRadius","GroupNodes","group","groupNodes","Math","min","node","max","right","xOffset","getElementById","offsetWidth","error","yOffset","offsetHeight","fetchGroupDimensions","groupList","insideGroup","fetchGroupNodes","assign","Graph","SaveState","s","setName","onSubmit","evt","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","downloadObjectAsJson","LoadState","file","files","reader","FileReader","readAsText","onload","result","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","id1","splits","ArgButtonsSlice","createSlice","connection_color","tail_selected","tail_id","reducers","updateColor","action","updateTail","resetToDragging","actions","configureStore","reducer","undoable","updatedPositions","xoffset","previous","yoffset","index","newBoxes","indexOf","id2","nanoid","textOne","textTwo","newOrder","splice","textOneLength","textTwoLength","newNode1Height","namedItem","clientHeight","pos","newPosition","currentPositions","values","p","idx","newConnections","array","join","contentState1","contentState2","selectionState2","insertionSelectionState","mergedContent","replaceWithFragment","newGroups","temp","arr","toString","groupId","startIdx","endIdx","selectedGroup","slice","idsInExistingGroups","sIdx","eIdx","containsElement","has","g","excludeAction","args","ArgsButtonsReducer","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.110f6971.chunk.js","sourcesContent":["import React from 'react';\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\nimport { useDispatch } from 'react-redux';\nimport '../../ContextMenu.css';\n\nexport const GROUP_MENU_ID = 'group-menu';\n\nfunction extractIds() {\n  // returns start and end of selected group\n  const selected = document.getElementsByClassName('selected');\n  const selectionSize = selected.length;\n  let start = false;\n  let end = false;\n  if (selectionSize > 0) {\n    start = selected[0].id;\n    end = selected[selectionSize - 1].id;\n  }\n  return { start, end, selectionSize };\n}\n\nexport default function GroupContextMenu() {\n  const dispatch = useDispatch();\n  const group = () => {\n    const { start, end, selectionSize } = extractIds();\n    if (start && end) {\n      dispatch({ type: 'groupIds', payload: { start, end, selectionSize } });\n    }\n  };\n\n  const ungroup = () => {\n    const { start, end, selectionSize } = extractIds();\n    if (start && end) {\n      dispatch({ type: 'ungroupIds', payload: { start, end } });\n    }\n  };\n\n  return (\n    <ContextMenu id={GROUP_MENU_ID} className=\"context-menu\" hideOnLeave>\n      <MenuItem onClick={group}>{'Group'}</MenuItem>\n      <MenuItem onClick={ungroup}>{'UnGroup'}</MenuItem>\n    </ContextMenu>\n  );\n}\n","import React from 'react';\nimport '../../ContextMenu.css';\nimport { ContextMenu, MenuItem, SubMenu } from 'react-contextmenu';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const MODES = {\n  מקרה: { color: '#222255', types: ['arrow', 'box'] },\n  דין: { color: '#222255', types: ['arrow', 'box'] },\n  טעם: { color: '#222255', types: ['arrow'] },\n  כותרת: { color: '#222255', types: ['arrow', 'box'] },\n  מעשה: { color: '#222255', types: ['arrow', 'box'] },\n  כלל: { color: '#222255', types: ['arrow', 'box'] },\n  אמירה: { color: '#ee6677', types: ['arrow', 'box'] },\n  שאלה: { color: '#ee6677', types: ['arrow', 'box'] },\n  תשובה: { color: '#ee6677', types: ['arrow'] },\n  קושיא: { color: '#ee6677', types: ['arrow'] },\n  תירוץ: { color: '#ee6677', types: ['arrow'] },\n  ראיה: { color: '#ee6677', types: ['arrow'] },\n  סיוע: { color: '#ee6677', types: ['arrow'] },\n  אגדתא: { color: '#ee6677', types: ['arrow', 'box'] },\n  אוקימתא: { color: '#ee6677', types: ['arrow'] },\n  מחלוקת: { color: '#ee6677', types: ['arrow', 'box'] },\n};\n\nconst LAYOUT = {\n  Tannaitic: ['מקרה', 'דין', 'טעם', 'כותרת', 'מעשה', 'אוקימתא', 'כלל'],\n  Talmud: [\n    'אמירה',\n    'שאלה',\n    'תשובה',\n    'קושיא',\n    'תירוץ',\n    'ראיה',\n    'סיוע',\n    'אגדתא',\n    'אוקימתא',\n    'מחלוקת',\n  ],\n};\n\nexport const NODE_MENU_ID = 'node_menu';\nexport const REMOVE_BOX_MENU_ID = 'remove_box_menu_id';\n\nexport function GraphContextMenu() {\n  // updates State and changes cursor color\n  const handleClick = (event, data, element) => {\n    const { target, label, type, dispatch } = data;\n    const { id } = element.firstChild;\n    // document.body.style.cursor = `url(${cursor}), auto`;\n    if (type === 'arrow') {\n      dispatch({ type: 'setMode', payload: { label, id } });\n    } else {\n      dispatch({ type: 'addBox', payload: { label, id } });\n    }\n  };\n\n  const dispatch = useDispatch();\n\n  return (\n    <ContextMenu id={NODE_MENU_ID} className=\"context-menu\" hideOnLeave>\n      {Object.keys(LAYOUT).map((book) => (\n        <SubMenu title={book} key={book}>\n          {LAYOUT[book].map((label) => (\n            <SubMenu title={label} key={label}>\n              {MODES[label].types.map((type) => (\n                <MenuItem\n                  onClick={handleClick}\n                  data={{ label, type, dispatch }}\n                  key={type}\n                >\n                  {type}\n                </MenuItem>\n              ))}\n            </SubMenu>\n          ))}\n        </SubMenu>\n      ))}\n    </ContextMenu>\n  );\n}\n\nexport function RemoveBoxMenu() {\n  const removeBox = (event, data, element) => {\n    const { target, dispatch } = data;\n    console.log(element);\n    const label = element.firstChild.getAttribute('nodelabel');\n    const id = element.firstChild.getAttribute('nodeid');\n    dispatch({ type: 'removeBox', payload: { id, label } });\n  };\n  const dispatch = useDispatch();\n\n  return (\n    <ContextMenu id={REMOVE_BOX_MENU_ID} className=\"context-menu\" hideOnLeave>\n      <MenuItem onClick={removeBox} data={{ dispatch }} key={'remove'}>\n        {'Remove Box'}\n      </MenuItem>\n    </ContextMenu>\n  );\n}\n","import React from 'react';\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\nimport { useDispatch } from 'react-redux';\n\nexport const ConnectionMenuId = 'connection_menu';\n\nexport default function ConnectionContextMenu() {\n  // updates State and changes cursor color\n  const handleClick = (event, data, element) => {\n    const { target, reducerType, dispatch } = data;\n    const { id } = target.parentElement.parentElement;\n    dispatch({ type: reducerType, payload: {id}  });\n  };\n  const dispatch = useDispatch();\n  return (\n    <ContextMenu id={ConnectionMenuId}>\n        <MenuItem\n          onClick={handleClick}\n          data={{reducerType: \"deleteConnection\", dispatch: dispatch}}\n          key='deleteConnection'\n          >\n          {\"Delete\"}\n        </MenuItem>\n    </ContextMenu>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction returnNodeParent(target) {\n  // returns closest parent of target if\n  // if parent is class 'node' or 'react-contextmenu-item\n  if (target === document) {\n    return false;\n  }\n  if (target.classList.contains('react-contextmenu-item')) {\n    return target;\n  }\n  if (target.classList.contains('node')) {\n    return target;\n  }\n  return returnNodeParent(target.parentNode);\n}\n\nfunction onClick(event, graph, dispatch) {\n  const target = returnNodeParent(event.target);\n\n  if (target === false) {\n    dispatch({ type: 'resetMode' });\n  } else if (target.classList[0] === 'react-contextmenu-item') {\n    // Entered Connection Mode\n  } else if (target.classList[0] === 'node') {\n    if (graph.selectedNode !== null) {\n      // console.log('In Connection Mode');\n      if (graph.selectedNode === target.id) {\n        // console.log('Same ID Clicked');\n      } else if (graph.connections.includes([graph.selectedNode, target.id])) {\n        // console.log('Connection Already in Present');\n      } else {\n        dispatch({\n          type: 'addConnection',\n          payload: {\n            connection: [graph.selectedNode, target.id, graph.mode],\n          },\n        });\n      }\n    }\n    dispatch({ type: 'resetMode' });\n  }\n}\n\nexport default function ConnectionListener() {\n  const graph = useSelector((state) => state.blocks.present.graph);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    function f(e) {\n      return onClick(e, graph, dispatch);\n    }\n    document.addEventListener('click', f);\n    return () => {\n      document.removeEventListener('click', f);\n    };\n  }, [graph]);\n  return <></>;\n}\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport './Blocks.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Switch from 'react-switch';\n\nfunction Note({ id }) {\n  const note = useSelector((state) => state.blocks.present.notes[id]);\n  const view = useSelector((state) => state.blocks.present.views[id]);\n  const dispatch = useDispatch();\n  if (view === false || view === undefined) {\n    return <div />;\n  }\n  return (\n    <TextareaAutosize\n      id={id}\n      className=\"note\"\n      onSelect={() => dispatch({ type: 'updateNote', payload: { id } })}\n      onChange={() => dispatch({ type: 'updateNote', payload: { id } })}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch({ type: 'updateNote', payload: { id } });\n      }}\n      value={note}\n    />\n  );\n}\n\nfunction ToggleNoteButton({ id }) {\n  const checked = useSelector((state) => state.blocks.present.views[id]);\n  const dispatch = useDispatch();\n  return (\n    <Switch\n      checked={checked}\n      onChange={() => dispatch({ type: 'toggleNote', payload: { id } })}\n      uncheckedIcon={false}\n      checkedIcon={false}\n      className=\"switch\"\n      onColor=\"#222255\"\n      onHandleColor=\"#ffffff\"\n      offColor=\"#888888\"\n      boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n      activeBoxShadow=\"0px 0px 1px 1px rgba(0, 0, 0, 0.2)\"\n      height={10}\n      width={20}\n    />\n  );\n}\n\nexport { Note, ToggleNoteButton };\n","import { SelectionState, Modifier, convertToRaw } from 'draft-js';\n\nexport function splitState(state) {\n  const caret = state.getSelection().getAnchorOffset();\n  const end = state.getCurrentContent().getPlainText().length;\n\n  const currentBlockKey = state.getSelection().getAnchorKey();\n  const lastBlockKey = state.getCurrentContent().getLastBlock().key;\n  const firstBlockKey = state.getCurrentContent().getFirstBlock().key;\n\n  const selectionSlice1 = SelectionState.createEmpty('blockkey').merge({\n    anchorKey: currentBlockKey,\n    anchorOffset: caret,\n    focusOffset: end,\n    focusKey: lastBlockKey,\n  });\n  const selectionSlice2 = SelectionState.createEmpty('blockkey').merge({\n    anchorKey: firstBlockKey,\n    anchorOffset: 0,\n    focusKey: currentBlockKey,\n    focusOffset: caret,\n  });\n\n  const contentSlice2 = Modifier.removeRange(\n    state.getCurrentContent(),\n    selectionSlice2,\n    'forward'\n  );\n  const contentSlice1 = Modifier.removeRange(\n    state.getCurrentContent(),\n    selectionSlice1,\n    'forward'\n  );\n\n  return {\n    slice1: JSON.stringify(convertToRaw(contentSlice1)),\n    slice2: JSON.stringify(convertToRaw(contentSlice2)),\n  };\n}\n\nexport function getSelectionInfo(state) {\n  const selection = state.getSelection();\n  return {\n    anchorKey: selection.getAnchorKey(),\n    anchorOffset: selection.getAnchorOffset(),\n    focusKey: selection.getFocusKey(),\n    focusOffset: selection.getFocusOffset(),\n    isBackward: selection.isBackward,\n  };\n}\n\nexport function createSelection({\n  anchorKey,\n  anchorOffset,\n  focusKey,\n  focusOffset,\n  isBackward,\n}) {\n  return SelectionState.createEmpty('blockkey').merge({\n    anchorKey,\n    anchorOffset,\n    focusKey,\n    focusOffset,\n    isBackward,\n  });\n}\n","export default {\n  TANNA: {\n    backgroundColor: '#BBCCEE',\n  },\n  AMORA: {\n    backgroundColor: '#ccddaa',\n  },\n  STAM: {\n    backgroundColor: '#ffcccc',\n  },\n  AMORA_MIDRASH: {\n    backgroundColor: '#BBCCEE',\n    borderBottom: '.2em solid #228833',\n  },\n  STAM_MIDRASH: {\n    backgroundColor: '#BBCCEE',\n    borderBottom: '.2em solid #ee6677',\n  },\n  STAM_AMORA: {\n    backgroundColor: '#ccddaa',\n    borderBottom: '.2em solid #ee6677',\n  },\n  TANAKH: {\n    fontWeight: 'bold',\n  },\n  CLEAR: {\n    color: 'black',\n  },\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Editor,\n  EditorState,\n  convertToRaw,\n  convertFromRaw,\n  SelectionState,\n} from 'draft-js';\nimport { splitState, getSelectionInfo, createSelection } from './helpers';\nimport './Blocks.css';\nimport HistoricalStyles from '../../config/HistoricalStyles';\n\nexport default function TextField({ id }) {\n  const txt = useSelector((state) => state.blocks.present.txts[id]);\n  const dispatch = useDispatch();\n  const selectionInfo = useSelector(\n    (state) => state.blocks.present.selections[id]\n  );\n  // Fetch & Create editor state\n  const editorState = EditorState.createWithContent(\n    convertFromRaw(JSON.parse(txt))\n  );\n  // Fetch & Create selection\n  let selection = null;\n  if (selectionInfo == null) {\n    selection = SelectionState.createEmpty();\n  } else {\n    selection = createSelection(selectionInfo);\n  }\n  // Create editor state with selection & local state\n  const reduxEditorState = EditorState.forceSelection(editorState, selection);\n  const [localEditorState, setEditorState] = useState(() =>\n    EditorState.forceSelection(editorState, selection)\n  );\n  // Force local state to always be reduxEditorState on rerender\n  if (\n    txt !== JSON.stringify(convertToRaw(localEditorState.getCurrentContent()))\n  ) {\n    setEditorState(reduxEditorState);\n  }\n  // Force focus after render if active\n  const activeId = useSelector((state) => state.blocks.present.activeId);\n  const editor = useRef();\n  useEffect(() => {\n    if (activeId === id) {\n      editor.current.focus();\n    }\n  });\n\n  return (\n    <>\n      <div\n        className=\"text-editor\"\n        id={id}\n        onBlur={() =>\n          dispatch({\n            type: 'updateId',\n            payload: {\n              id: null,\n            },\n          })\n        }\n      >\n        <Editor\n          ref={editor}\n          customStyleMap={HistoricalStyles}\n          editorState={localEditorState}\n          onChange={(state) => {\n            const justSelection =\n              state.getCurrentContent().getPlainText() ===\n              localEditorState.getCurrentContent().getPlainText();\n            setEditorState(state);\n            if (justSelection) {\n              // UpdateSelection action is excluded from undo/redo\n              dispatch({\n                type: 'updateSelection',\n                payload: {\n                  id,\n                  split: splitState(state),\n                  selection: getSelectionInfo(state),\n                },\n              });\n            } else {\n              dispatch({\n                type: 'updateText',\n                payload: {\n                  id,\n                  txt: JSON.stringify(convertToRaw(state.getCurrentContent())),\n                  split: splitState(state),\n                  selection: getSelectionInfo(state),\n                },\n              });\n            }\n          }}\n        />\n      </div>\n    </>\n  );\n}\nTextField.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Draggable from 'react-draggable';\nimport Selecto from 'react-selecto';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { Note, ToggleNoteButton } from './Note';\nimport TextField from './Text';\nimport './Blocks.css';\nimport { GROUP_MENU_ID } from './GroupsContextMenu';\n\nexport default function Blocks() {\n  const order = useSelector((state) => state.blocks.present.order);\n  const [selection, setSelection] = useState(new Set());\n  // const addEl = (el) => {\n  //   setSelection((prev) => new Set(prev).add(el));\n  // };\n  // const removeEl = (el) => {\n  //   setSelection((prev) => new Set(prev).delete(el));\n  // };\n\n  const blocks = order.map((id) => (\n    <div className=\"block\" key={id}>\n      <TextField id={id} />\n      <ToggleNoteButton id={id} />\n      <Note id={id} />\n    </div>\n  ));\n  return (\n    <>\n      <ContextMenuTrigger id={GROUP_MENU_ID} holdToDisplay={-1}>\n        <Draggable handle=\"#drag-bar-blocks\" bounds={{ top: 0 }}>\n          <div id=\"blocks\">\n            <div id=\"drag-bar-blocks\" />\n            <div id=\"blocks-selecting-area\">{blocks}</div>\n          </div>\n        </Draggable>\n      </ContextMenuTrigger>\n      <Selecto\n        // The container to add a selection element\n        // container={document.querySelector('#blocks-selecting-area')}\n        // The area to drag selection element (default: container)\n        dragContainer={'#blocks-selecting-area'}\n        // Targets to select. You can register a queryselector or an Element.\n        selectableTargets={['.text-editor']}\n        // Whether to select by click (default: true)\n        selectByClick={true}\n        // Whether to select from the target inside (default: true)\n        selectFromInside={true}\n        // After the select, whether to select the next target with the selected target (deselected if the target is selected again).\n        continueSelect={false}\n        // Determines which key to continue selecting the next target via keydown and keyup.\n        toggleContinueSelect={'shift'}\n        // The container for keydown and keyup events\n        // keyContainer={window}\n        // The rate at which the target overlaps the drag area to be selected. (default: 100)\n        hitRate={5}\n        onSelect={(e) => {\n          e.added.forEach((el) => {\n            el.classList.add('selected');\n            el.style.backgroundColor = 'lightgrey';\n          });\n          e.removed.forEach((el) => {\n            el.classList.remove('selected');\n            el.style.backgroundColor = 'white';\n          });\n        }}\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './HeaderButtons.css';\nimport { ActionCreators } from 'redux-undo';\nimport {\n  EditorState,\n  RichUtils,\n  convertFromRaw,\n  convertToRaw,\n  Modifier,\n} from 'draft-js';\nimport {\n  splitState,\n  createSelection,\n  getSelectionInfo,\n} from '../blocks/helpers';\nimport HistoricalStyles from '../../config/HistoricalStyles';\n\nconst removeInlineStyles = (editorState, styles) => {\n  const contentState = editorState.getCurrentContent();\n  const contentWithoutStyles = styles.reduce(\n    (newContentState, style) =>\n      Modifier.removeInlineStyle(\n        newContentState,\n        editorState.getSelection(),\n        style\n      ),\n    contentState\n  );\n\n  const newEditorState = EditorState.push(\n    editorState,\n    contentWithoutStyles,\n    'change-inline-style'\n  );\n\n  return newEditorState;\n};\n\nconst allStyles = [\n  'TANNA',\n  'AMORA',\n  'AMORA_MIDRASH',\n  'STAM',\n  'STAM_MIDRASH',\n  'STAM_AMORA',\n  'CLEAR',\n  'TANAKH',\n];\n\nconst primaryStyles = [\n  'TANNA',\n  'AMORA',\n  'AMORA_MIDRASH',\n  'STAM',\n  'STAM_MIDRASH',\n  'STAM_AMORA',\n  'CLEAR',\n];\nconst clearAllInLineStyles = (editorState) =>\n  removeInlineStyles(editorState, allStyles);\nconst removePrimaryInLineStyles = (editorState) =>\n  removeInlineStyles(editorState, primaryStyles);\n\nexport function MergeButton() {\n  const dispatch = useDispatch();\n  return (\n    <button\n      type=\"button\"\n      onMouseDown={(event) => {\n        event.preventDefault();\n        if (\n          // verify active element is a Textfield Component\n          document.activeElement.getAttribute('class') !==\n          'notranslate public-DraftEditor-content'\n        ) {\n          return;\n        }\n        const { id } =\n          document.activeElement.parentElement.parentElement.parentElement;\n        dispatch({ type: 'mergeText', payload: { id } });\n      }}\n    >\n      merge\n    </button>\n  );\n}\n\nexport function SplitButton() {\n  const dispatch = useDispatch();\n  return (\n    <button\n      type=\"button\"\n      onMouseDown={(event) => {\n        event.preventDefault();\n        if (\n          // verify active element is a Textfield Component\n          document.activeElement.getAttribute('class') !==\n          'notranslate public-DraftEditor-content'\n        ) {\n          return;\n        }\n        const { id } =\n          document.activeElement.parentElement.parentElement.parentElement;\n        dispatch({ type: 'splitText', payload: { id } });\n      }}\n    >\n      split\n    </button>\n  );\n}\n\nexport function RedoButton() {\n  const dispatch = useDispatch();\n  return (\n    <button type=\"button\" onClick={() => dispatch(ActionCreators.redo())}>\n      redo\n    </button>\n  );\n}\n\nexport function UndoButton() {\n  const dispatch = useDispatch();\n  // const UndoButton = (\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        dispatch(ActionCreators.undo());\n      }}\n    >\n      undo\n    </button>\n  );\n}\n\nexport function HistoricalLayerButton(props) {\n  const dispatch = useDispatch();\n  const txts = useSelector((state) => state.blocks.present.txts);\n  const selections = useSelector((state) => state.blocks.present.selections);\n  return (\n    <button\n      className=\"historical-layer-button\"\n      style={HistoricalStyles[props.dataStyle]}\n      type=\"button\"\n      data-style={props.dataStyle}\n      onMouseUp={(event) => event.preventDefault()}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        if (\n          // verify active element is a Textfield Component\n          document.activeElement.getAttribute('class') !==\n          'notranslate public-DraftEditor-content'\n        ) {\n          return;\n        }\n        const style = event.currentTarget.getAttribute('data-style');\n        const { id } =\n          document.activeElement.parentElement.parentElement.parentElement;\n\n        const contentState = convertFromRaw(JSON.parse(txts[id]));\n        let newSelectionState = createSelection(selections[id]);\n        let newEditorState = EditorState.createWithContent(contentState);\n        newEditorState = EditorState.acceptSelection(\n          newEditorState,\n          newSelectionState\n        );\n\n        const originalContentHash = JSON.stringify(\n          newEditorState.getCurrentContent().getBlockMap()\n        );\n\n        // inline style handing logic\n        if (props.clearer) {\n          newEditorState = clearAllInLineStyles(newEditorState);\n        } else if (props.layerable) {\n          // don't remove inline styles\n        } else {\n          newEditorState = removePrimaryInLineStyles(newEditorState);\n        }\n        newEditorState = RichUtils.toggleInlineStyle(newEditorState, style);\n\n        // check if the content styling would change.\n        // If it does, reset caret to 0\n        // and send update to redux store\n        const newContentHash = JSON.stringify(\n          newEditorState.getCurrentContent().getBlockMap()\n        );\n        if (originalContentHash != newContentHash) {\n          // saving original split before selection reset\n          const split = splitState(newEditorState);\n          // create reset caret selection\n          const key = newEditorState\n            .getCurrentContent()\n            .getFirstBlock()\n            .getKey();\n          newSelectionState = createSelection({\n            anchorKey: key,\n            anchorOffset: 0,\n            focusKey: key,\n            focusOffset: 0,\n            isBackward: false,\n          });\n          // force new selection\n          newEditorState = EditorState.forceSelection(\n            newEditorState,\n            newSelectionState\n          );\n          // dispatch update\n          dispatch({\n            type: 'updateText',\n            payload: {\n              id,\n              txt: JSON.stringify(\n                convertToRaw(newEditorState.getCurrentContent())\n              ),\n              split,\n              selection: getSelectionInfo(newEditorState),\n            },\n          });\n        }\n      }}\n    >\n      {props.name}\n    </button>\n  );\n}\n\nexport default function HeaderButtons() {\n  return (\n    <div className=\"header_buttons\">\n      <div id=\"command-buttons\">\n        <UndoButton />\n        <RedoButton />\n        <MergeButton />\n        <SplitButton />\n      </div>\n      <div id=\"historical-layer-buttons\">\n        <HistoricalLayerButton dataStyle=\"TANNA\" name=\"Tannaitic\" />\n        <HistoricalLayerButton dataStyle=\"AMORA\" name=\"Amoraic\" />\n        <HistoricalLayerButton dataStyle=\"STAM\" name=\"Stam\" />\n        <HistoricalLayerButton dataStyle=\"AMORA_MIDRASH\" name=\"T from A\" />\n        <HistoricalLayerButton dataStyle=\"STAM_MIDRASH\" name=\"T from S\" />\n        <HistoricalLayerButton dataStyle=\"STAM_AMORA\" name=\"A from S\" />\n        <HistoricalLayerButton\n          dataStyle=\"TANAKH\"\n          name=\"Tanakh\"\n          layerable={true}\n        />\n        <HistoricalLayerButton dataStyle=\"CLEAR\" name=\"Clear\" clearer={true} />\n      </div>\n    </div>\n  );\n}\n","import { MODES } from './GraphContextMenu';\n\n/**\n * Constructs ordered list of nodes in group\n * @param {list} order - ids in order @example ['a','start','b','end']\n * @param {object} groups - group start and ends @example {start: 'end'}\n * @return {list} nodesMap - order with groups @example ['a', ['start', 'b', 'end']]\n */\nexport function fetchGroupNodes(order, group) {\n  const groupList = [];\n  let insideGroup = false;\n\n  // Traverse order & convert group into group list\n  for (let i = 0; i < order.length; i += 1) {\n    const id = order[i];\n    if (group[0] === id) {\n      // traversing start of group\n      insideGroup = true;\n      groupList.push(id);\n    } else if (id === group[1]) {\n      // traversing end of group id\n      insideGroup = false;\n      groupList.push(id);\n    } else if (insideGroup === true) {\n      groupList.push(id);\n    }\n  }\n  return groupList;\n}\n\n/**\n * Constructs ordered list of individual nodes and group nodes\n * @example ['a', ['b', 'c', 'd'], 'e', 'f', ['g', 'h']]\n * @param {list} order - ids in order @example ['a','start','b','end']\n * @param {object} groups - group start and ends @example {groupId: ['start', 'end']}\n * @return {list} nodesMap - order with groups @example ['a', ['start', 'b', 'end']]\n */\nexport function createNodesMapping(order, groups) {\n  const nodesMap = [];\n\n  let insideGroup = false;\n  let grp = [];\n\n  const groupIds = Object.keys(groups);\n  const starts = groupIds.map((id) => groups[id][0]);\n  const ends = groupIds.map((id) => groups[id][1]);\n\n  // Traverse order & convert groups into arrays\n  for (let i = 0; i < order.length; i += 1) {\n    const id = order[i];\n    if (insideGroup && !ends.includes(id)) {\n      // traversing inside group id\n      grp.push(id);\n    } else if (insideGroup && ends.includes(id)) {\n      // traversing end of group id\n      grp.push(id);\n      nodesMap.push(grp);\n      insideGroup = false;\n      grp = [];\n    } else if (starts.includes(id)) {\n      // traversing start of group id\n      insideGroup = true;\n      grp = [id];\n    } else {\n      // traversing ungrouped id\n      nodesMap.push(id);\n    }\n  }\n  return nodesMap;\n}\n\n/**\n * Constructs dimensions for a group node\n * @param {list} groupNodes - nodes in a group @example ['id1','id2','id3']\n * @param {object} positions - positions of nodes @example {id1: [0,0], id2: [2,4], id3: [5,5]}\n * @return {list} height, width, top, left - css dimensions of group\n */\nconst GROUPNODE_PADDING = 40;\nexport function fetchGroupDimensions(groupNodes, positions) {\n  // Calculates the top and left position and\n  // compensates padding when group is rendered near\n  // parent element boundary\n  const left = Math.min(\n    ...groupNodes.map((node) => Math.max(0, positions[node][0]))\n  );\n  const top = Math.min(\n    ...groupNodes.map((node) => Math.max(0, positions[node][1]))\n  );\n  // Calculates the right and left position\n  // to contains outer-most SingleNodes with padding\n  const right = Math.max(\n    ...groupNodes.map((node) => {\n      let xOffset = 0;\n      try {\n        // verify that the rightest-most node has rendered\n        xOffset = document.getElementById(node).offsetWidth;\n      } catch (error) {\n        console.log(error);\n      }\n      return xOffset + positions[node][0];\n    })\n  );\n  const bottom = Math.max(\n    ...groupNodes.map((node) => {\n      let yOffset = 0;\n      try {\n        // verify that the lowest-most node has rendered\n        yOffset = document.getElementById(node).offsetHeight;\n      } catch (error) {\n        console.log(error);\n      }\n      return yOffset + positions[node][1] + GROUPNODE_PADDING;\n    })\n  );\n  // Compile CSS shape and position of GroupNode\n  const height = bottom - top;\n  const width = right - left;\n  return { height, width, top, left };\n}\n\nexport function legendColor({ boxLabels, connectionLabels }) {\n  let color = '';\n  let legends = [];\n  if (boxLabels && connectionLabels) {\n    legends = boxLabels.concat(connectionLabels);\n  } else if (boxLabels) {\n    legends = boxLabels;\n  } else if (connectionLabels) {\n    legends = connectionLabels;\n  } else {\n    return color;\n  }\n  legends.forEach((label) => {\n    color = MODES[label].color;\n  });\n\n  return color;\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { REMOVE_BOX_MENU_ID } from './GraphContextMenu';\nimport { legendColor } from './helpers';\n\nexport default function NodeLegend({ id }) {\n  // collect box labels associated with node\n  const boxLabels = useSelector(\n    (state) => state.blocks.present.graph.boxes[id]\n  );\n  // collect arrow labels associated with node\n  const connections = useSelector(\n    (state) => state.blocks.present.graph.connections\n  );\n  const connectionLabels = connections\n    .filter((c) => c[0] === id)\n    .map((c) => c[2]);\n  // calculate legend color\n  const color = legendColor({ boxLabels, connectionLabels });\n\n  return (\n    <legend className=\"legend\" style={{ color }}>\n      <ArrowLegend connectionLabels={connectionLabels} id={id} />\n      <BoxLegend boxLabels={boxLabels} id={id} />\n    </legend>\n  );\n}\nNodeLegend.propTypes = {\n  id: propTypes.string.isRequired,\n};\n\nexport function BoxLegend({ boxLabels, id }) {\n  // create box legend\n  let boxLegend = <></>;\n  if (Array.isArray(boxLabels)) {\n    boxLegend = boxLabels.map((label) => (\n      <div className=\"box-label\" nodeid={id} key={id + label}>\n        <ContextMenuTrigger\n          id={REMOVE_BOX_MENU_ID}\n          key={id + label}\n          holdToDisplay={-1}\n          label={label}\n        >\n          <div nodeid={id} nodelabel={label}>\n            {` ⬛ ${label}`}\n          </div>\n        </ContextMenuTrigger>\n      </div>\n    ));\n    return <div className=\"box-legend\">{boxLegend}</div>;\n  }\n  return null;\n}\nBoxLegend.propTypes = {\n  id: propTypes.string.isRequired,\n  boxLabels: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport function ArrowLegend({ connectionLabels, id }) {\n  // create arrow legend\n  let arrowLegend = '';\n  if (connectionLabels) {\n    arrowLegend = connectionLabels.map((label) => (\n      <div className=\"arrow-label\" nodeid={id} key={id + label}>\n        {` ◀️ ${label}`}\n      </div>\n    ));\n    return <div className=\"arrow-legend\">{arrowLegend}</div>;\n  }\n  return null;\n}\nArrowLegend.propTypes = {\n  id: propTypes.string.isRequired,\n  connectionLabels: propTypes.arrayOf(propTypes.string).isRequired,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Draggable from 'react-draggable';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { convertFromRaw, Editor, EditorState } from 'draft-js';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport HistoricalStyles from '../../config/HistoricalStyles';\nimport { NODE_MENU_ID } from './GraphContextMenu';\nimport { legendColor } from './helpers';\nimport NodeLegend from './NodeLegend';\nimport './css/Nodes.css';\n\nexport default function SingleNodes() {\n  const order = useSelector((state) => state.blocks.present.order);\n  const nodes = order.map((element) => (\n    <SingleNode id={element} key={element} />\n  ));\n  return nodes;\n}\n\nfunction SingleNode(props) {\n  const { id } = props;\n  const dispatch = useDispatch();\n  const position = useSelector((state) => state.blocks.present.positions[id]);\n  const txt = useSelector((state) => state.blocks.present.txts[id]);\n  const selectedNode = useSelector(\n    (state) => state.blocks.present.graph.selectedNode\n  );\n  const boxLabels = useSelector(\n    (state) => state.blocks.present.graph.boxes[id]\n  );\n  const connectionLabels = useSelector((state) =>\n    state.blocks.present.graph.connections\n      .filter((c) => c[0] === id)\n      .map((c) => c[2])\n  );\n  // determine color of legend and node\n  let style = {};\n  if (selectedNode === id) {\n    style = { backgroundColor: 'gold' };\n  } else {\n    style = {\n      borderColor: legendColor({ boxLabels, connectionLabels }),\n    };\n  }\n\n  const handleDrag = (e, d) => {\n    dispatch({\n      type: 'updatePosition',\n      payload: {\n        id,\n        x: d.lastX + d.deltaX,\n        y: d.lastY + d.deltaY,\n      },\n    });\n  };\n  const x = position[0];\n  const y = position[1];\n  return (\n    <ContextMenuTrigger id={NODE_MENU_ID} key={id} holdToDisplay={-1}>\n      <Draggable\n        onStop={handleDrag}\n        onDrag={handleDrag}\n        key={id}\n        defaultPosition={{ x, y }}\n        bounds={{ left: 0, top: 0 }}\n      >\n        <fieldset className=\"node single-node\" id={id} style={style}>\n          <NodeLegend id={id} />\n          <Editor\n            readOnly\n            customStyleMap={HistoricalStyles}\n            editorState={EditorState.createWithContent(\n              convertFromRaw(JSON.parse(txt))\n            )}\n            onChange={() => {}}\n          />\n        </fieldset>\n      </Draggable>\n    </ContextMenuTrigger>\n  );\n}\nSingleNode.propTypes = {\n  id: propTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport React from 'react';\nimport Xarrow from 'react-xarrows';\n\nexport default function SequentialPath() {\n  const order = useSelector((state) => state.blocks.present.order);\n  // triggers re-render on state change\n  const positions = useSelector((state) => state.blocks.present.positions);\n  const groups = useSelector((state) => state.blocks.present.groups);\n\n  const links = {};\n  for (let i = 0; i < order.length - 1; i += 1) {\n    links[order[i]] = order[i + 1];\n  }\n  const path = [];\n\n  Object.keys(links).forEach((key) => {\n    const start = key;\n    const end = links[key];\n    path.push(\n      <Xarrow\n        key={start + end}\n        id={start + end}\n        start={start}\n        end={end}\n        strokeWidth={1}\n        lineColor=\"grey\"\n        headColor=\"grey\"\n        dashness\n      />\n    );\n  });\n\n  return path;\n}\n","import { useSelector } from 'react-redux';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport React from 'react';\nimport Xarrow from 'react-xarrows';\nimport { MODES } from './GraphContextMenu';\nimport { ConnectionMenuId } from './ConnectionContextMenu';\nimport './css/Connections.css';\n\nexport default function NodeConnections() {\n  const connections = useSelector(\n    (state) => state.blocks.present.graph.connections\n  );\n  // triggers re-render on state change\n  const positions = useSelector((state) => state.blocks.present.positions);\n  const groups = useSelector((state) => state.blocks.present.groups);\n\n  const anchors = {};\n  return connections.map((connection) => {\n    const start = connection[0];\n    const end = connection[1];\n    const mode = connection[2];\n\n    anchors.hasOwnProperty(start)\n      ? (anchors[start] += 1)\n      : (anchors[start] = 1);\n    anchors.hasOwnProperty(end) ? (anchors[end] += 1) : (anchors[end] = 1);\n    // start and end offsets begin at index 1 (leaves room for sequential path)\n\n    // console.log(anchors);\n    let sideStartOffset = anchors[start];\n    if (sideStartOffset % 2 === 0) {\n      sideStartOffset /= -2;\n    } else {\n      sideStartOffset += 1;\n      sideStartOffset /= 2;\n    }\n    let sideEndOffset = anchors[end];\n    if (sideEndOffset % 2 === 0) {\n      sideEndOffset /= -2;\n    } else {\n      sideEndOffset += 1;\n      sideEndOffset /= 2;\n    }\n\n    const longStartOffset = anchors[start];\n\n    const yspacing = 10;\n    const xspacing = 10;\n\n    return (\n      <ContextMenuTrigger id={ConnectionMenuId} key={start + end + mode}>\n        <Xarrow\n          key={start + end + mode}\n          id={start + end + mode}\n          start={start}\n          end={end}\n          startAnchor={[\n            {\n              position: 'right',\n              offset: { bottomness: yspacing * sideStartOffset, rightness: 0 },\n            },\n            {\n              position: 'left',\n              offset: { bottomness: yspacing * sideStartOffset, rightness: 0 },\n            },\n            {\n              position: 'bottom',\n              offset: { bottomness: 0, rightness: xspacing * sideStartOffset },\n            },\n            {\n              position: 'top',\n              offset: { bottomness: 0, rightness: xspacing * sideStartOffset },\n            },\n          ]}\n          endAnchor={[\n            {\n              position: 'right',\n              offset: { bottomness: yspacing * sideEndOffset, rightness: 0 },\n            },\n            {\n              position: 'left',\n              offset: { bottomness: yspacing * sideEndOffset, rightness: 0 },\n            },\n            {\n              position: 'bottom',\n              offset: { bottomness: 0, rightness: xspacing * sideEndOffset },\n            },\n            {\n              position: 'top',\n              offset: { bottomness: 0, rightness: xspacing * sideEndOffset },\n            },\n          ]}\n          strokeWidth={2}\n          headSize={3}\n          lineColor={MODES[mode].color}\n          headColor={MODES[mode].color}\n          arrowBodyProps={{ className: 'arrow_body' }}\n          arrowHeadProps={{ className: 'arrow_head' }}\n          SVGcanvasProps={{ className: 'svg' }}\n          // path=\"grid\"\n          label={{\n            middle: (\n              <div\n                className=\"arrow_label\"\n                style={{\n                  color: MODES[mode].color,\n                  backgroundColor: 'white',\n                  borderStyle: 'solid',\n                  borderWidth: '0px',\n                  borderColor: MODES[mode].color,\n                  borderRadius: '5px',\n                  // transform: 'translate(100%, 0%)',\n                }}\n              >\n                {\"'\" + mode[0] + mode[1]}\n              </div>\n            ),\n          }}\n        />\n      </ContextMenuTrigger>\n    );\n  });\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { fetchGroupNodes, fetchGroupDimensions, legendColor } from './helpers';\nimport { NODE_MENU_ID } from './GraphContextMenu';\nimport NodeLegend from './NodeLegend';\nimport './css/Nodes.css';\n\nexport default function GroupNodes() {\n  const positions = useSelector((state) => state.blocks.present.positions);\n  const groups = useSelector((state) => state.blocks.present.groups);\n  const order = useSelector((state) => state.blocks.present.order);\n  const selectedNode = useSelector(\n    (state) => state.blocks.present.graph.selectedNode\n  );\n  const connections = useSelector(\n    (state) => state.blocks.present.graph.connections\n  );\n  const boxes = useSelector((state) => state.blocks.present.graph.boxes);\n  // forces update when text changes (could effect the size of node\n  const texts = useSelector((state) => state.blocks.present.txts);\n\n  const groupNodes = Object.keys(groups).map((key) => {\n    const group = groups[key];\n    const nodes = fetchGroupNodes(order, group);\n    const { height, width, top, left } = fetchGroupDimensions(nodes, positions);\n    const style = {\n      position: 'absolute', // this line seems not work if included directly in css file\n      top,\n      left,\n      height,\n      width,\n    };\n    // Set formatting if active node in select mode\n    if (selectedNode === key) {\n      Object.assign(style, { borderColor: 'gold', backgroundColor: 'gold' });\n    }\n    // Set border of the node if labeled\n    const boxLabels = boxes[key];\n    const connectionLabels = connections\n      .filter((c) => c[0] === key)\n      .map((c) => c[2]);\n    const color = legendColor({ boxLabels, connectionLabels });\n    style.borderColor = color;\n\n    return (\n      <ContextMenuTrigger id={NODE_MENU_ID} key={key} holdToDisplay={-1}>\n        <fieldset id={key} className=\"node group-node\" style={style}>\n          <NodeLegend id={key} />\n        </fieldset>\n      </ContextMenuTrigger>\n    );\n  });\n\n  return groupNodes;\n}\n","import { React } from 'react';\nimport Draggable from 'react-draggable';\nimport './css/Graph.css';\nimport SingleNodes from './SingleNodes';\nimport SequentialPath from './SequentialPath';\nimport NodeConnections from './Connections';\nimport GroupNodes from './GroupNodes';\n\nexport default function Graph() {\n  return (\n    <Draggable handle=\".drag-bar\" bounds={{ top: 0 }}>\n      <div className=\"graph\">\n        <div className=\"drag-bar\" />\n        <div className=\"canvas\">\n          <SingleNodes />\n          <GroupNodes />\n        </div>\n        <SequentialPath />\n        <NodeConnections />\n      </div>\n    </Draggable>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './DownloadButton.css';\n\nfunction downloadObjectAsJson(exportObj, exportName) {\n  let dataStr =\n    'data:text/json;charset=utf-8,' +\n    encodeURIComponent(JSON.stringify(exportObj));\n  let downloadAnchorNode = document.createElement('a');\n  downloadAnchorNode.setAttribute('href', dataStr);\n  downloadAnchorNode.setAttribute('download', exportName + '.json');\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n}\n\nexport function SaveState() {\n  const s = useSelector((state) => state.blocks.present);\n  // const positions = useSelector((state) => state.blocks.present.positions);\n  const [name, setName] = useState('');\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    downloadObjectAsJson(s, name);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {'Save File '}\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Save\" />\n    </form>\n  );\n}\n\nexport function LoadState() {\n  const dispatch = useDispatch();\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    // console.log(file.name);\n    const file = document.getElementById('file').files[0];\n    if (!file) {\n      return;\n    }\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = function () {\n      const state = JSON.parse(reader.result);\n      console.log(state);\n      dispatch({\n        type: 'loadState',\n        payload: {\n          state,\n        },\n      });\n    };\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" id=\"file\" name=\"file\" className=\"inputfile\" />\n      {/* <label for=\"file\">Load File:</label> */}\n      <input type=\"submit\" value=\"Load\" />\n    </form>\n  );\n}\n","import './App.css';\nimport React from 'react';\nimport GroupContextMenu from './features/blocks/GroupsContextMenu';\nimport {\n  GraphContextMenu,\n  RemoveBoxMenu,\n} from './features/graph/GraphContextMenu';\nimport ConnectionContextMenu from './features/graph/ConnectionContextMenu';\nimport ConnectionListener from './features/graph/ConnectionListener';\nimport Blocks from './features/blocks/Blocks';\nimport HeaderButtons from './features/HeaderButtons/HeaderButtons';\nimport Graph from './features/graph/Graph';\nimport { SaveState, LoadState } from './features/HeaderButtons/DownloadButton';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GroupContextMenu />\n      <GraphContextMenu />\n      <RemoveBoxMenu />\n      <ConnectionContextMenu />\n      <ConnectionListener />\n      <div className=\"top\">\n        <div className=\"load_save_buttons\">\n          <SaveState />\n          <LoadState />\n        </div>\n        <div className=\"right_buttons\">\n          <HeaderButtons />\n        </div>\n      </div>\n      <div className=\"bottom\">\n        <div className=\"left-panel\">\n          <Graph />\n        </div>\n        <div className=\"right-panel\">\n          <Blocks />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { nanoid } from '@reduxjs/toolkit';\nimport {\n  EditorState,\n  SelectionState,\n  convertToRaw,\n  convertFromRaw,\n  Modifier,\n} from 'draft-js';\n\nconst initialState = {\n  caret: -1,\n  activeId: 'id1',\n  order: ['id1'],\n  groups: {},\n  txts: {\n    id1: JSON.stringify(\n      convertToRaw(EditorState.createEmpty().getCurrentContent())\n    ),\n  },\n  splits: { id1: { slice1: 0, slice2: 0 } },\n  selections: {\n    id1: null,\n  },\n  notes: { id1: '' },\n  views: { id1: false },\n  positions: { id1: [0, 0] },\n  graph: {\n    connections: [],\n    mode: null,\n    selectedNode: null,\n    boxes: { id1: [] },\n  },\n};\n\nexport default function BlocksReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'loadState': {\n      const updatedPositions = action.payload.state.positions;\n\n      // Update node positions to avoid unaccesible nodes in Graph\n      const xoffset = Object.keys(updatedPositions).reduce(\n        (previous, key) => Math.min(updatedPositions[key][0], previous),\n        0\n      );\n      const yoffset = Object.keys(updatedPositions).reduce(\n        (previous, key) => Math.min(updatedPositions[key][1], previous),\n        0\n      );\n      Object.keys(updatedPositions).map((key, index) => {\n        updatedPositions[key] = [\n          updatedPositions[key][0] - xoffset,\n          updatedPositions[key][1] - yoffset,\n        ];\n        return updatedPositions;\n      });\n\n      // backwards-compatibility change\n      // Add a groups state if it doesn't already exist\n      const groups = action.payload.state.groups || {};\n\n      // backwards-compatibility change\n      // makes boxes into lists\n      const boxes = { ...state.graph.boxes };\n      const newBoxes = {};\n      Object.keys(boxes).forEach((key) => {\n        if (Array.isArray(boxes[key])) {\n          newBoxes[key] = boxes[key];\n        } else {\n          newBoxes[key] = [boxes[key]];\n        }\n      });\n\n      return {\n        ...action.payload.state,\n        groups,\n        positions: updatedPositions,\n        graph: {\n          ...action.payload.state.graph,\n          boxes: { ...newBoxes },\n        },\n      };\n    }\n    case 'updateId':\n      return {\n        ...state,\n        activeId: action.payload.id,\n      };\n    case 'updateText':\n      return {\n        ...state,\n        txts: { ...state.txts, [action.payload.id]: action.payload.txt },\n        splits: { ...state.splits, [action.payload.id]: action.payload.split },\n        selections: {\n          ...state.selections,\n          [action.payload.id]: action.payload.selection,\n        },\n      };\n    case 'updateSelection':\n      return {\n        ...state,\n        activeId: action.payload.id,\n        splits: { ...state.splits, [action.payload.id]: action.payload.split },\n        selections: {\n          ...state.selections,\n          [action.payload.id]: action.payload.selection,\n        },\n      };\n    case 'splitText': {\n      // Initialize ids, texts, and order\n      const id1 = action.payload.id;\n      const index = state.order.indexOf(id1);\n      const id2 = nanoid();\n      const textOne = state.splits[id1]['slice1'];\n      const textTwo = state.splits[id1]['slice2'];\n      const newOrder = [...state.order];\n      newOrder.splice(index + 1, 0, id2);\n\n      // Set new position of node in graph\n      const textOneLength = convertFromRaw(JSON.parse(textOne)).getPlainText()\n        .length;\n      const textTwoLength = convertFromRaw(JSON.parse(textTwo)).getPlainText()\n        .length;\n\n      const OriginalNode1Height = document\n        .getElementsByClassName('node')\n        .namedItem(id1).clientHeight;\n\n      const newNode1Height =\n        (OriginalNode1Height * textOneLength) /\n        (textOneLength + textTwoLength + 0.01); // to prevent divisions by zero if text lengths are 0\n\n      const pos = state.positions[id1];\n      const newPosition = [pos[0], pos[1] + newNode1Height + 50];\n\n      // Updates new node position if new node is on top of existing node\n      const currentPositions = Object.values(state.positions);\n      let i = 0;\n      while (\n        currentPositions.filter(\n          (p) => JSON.stringify(p) === JSON.stringify(newPosition)\n        ).length > 0\n      ) {\n        i += 1;\n        newPosition[0] += 15;\n        newPosition[1] += 15;\n        if (i > 5) {\n          // Stops after five attempts to change position\n          break;\n        }\n      }\n\n      // Create and Return new state\n      return {\n        ...state,\n        activeId: id2,\n        order: newOrder,\n        txts: {\n          ...state.txts,\n          [id1]: textOne,\n          [id2]: textTwo,\n        },\n        splits: {\n          ...state.splits,\n          [id1]: { slice1: textOne, slice2: textOne },\n          [id2]: { slice1: textTwo, slice2: textTwo },\n        },\n        notes: { ...state.notes, [id2]: '' },\n        views: { ...state.views, [id2]: false },\n        positions: { ...state.positions, [id2]: newPosition },\n        graph: {\n          ...state.graph,\n          boxes: { ...state.graph.boxes, [id2]: [] },\n        },\n      };\n    }\n    case 'mergeText': {\n      const id2 = action.payload.id;\n      const idx = state.order.indexOf(id2);\n      if (idx === 0) {\n        return state; // not possible to merge up first block\n      }\n      const id1 = state.order[idx - 1];\n      const newOrder = [...state.order];\n      newOrder.splice(idx, 1);\n\n      // Move merged connections\n      let newConnections = state.graph.connections\n        .map((connection) =>\n          connection.map((id) => {\n            if (id === id2) {\n              return id1;\n            }\n            return id;\n          })\n        )\n        .filter((connection) => connection[0] !== connection[1]);\n      // Remove Duplicate connections\n      const s = new Set(newConnections.map((array) => array.join()));\n      newConnections = [...s].map((array) => array.split(','));\n\n      // Move merged box labels\n      let newBoxes = { ...state.graph.boxes };\n      newBoxes[id1] = newBoxes[id1].concat(newBoxes[id2]);\n      // Remove duplicate box labels\n      delete newBoxes[id2];\n\n      // Creates Merged Content State\n      const contentState1 = convertFromRaw(JSON.parse(state.txts[id1]));\n      const contentState2 = convertFromRaw(JSON.parse(state.txts[id2]));\n      const selectionState2 =\n        EditorState.createWithContent(contentState2).getSelection();\n      const firstBlockKey = selectionState2.getAnchorKey();\n      const insertionSelectionState = SelectionState.createEmpty(\n        'blockkey'\n      ).merge({\n        anchorKey: firstBlockKey,\n        anchorOffset: 0,\n        focusKey: firstBlockKey,\n        focusOffset: 0,\n      });\n      const mergedContent = Modifier.replaceWithFragment(\n        contentState2,\n        insertionSelectionState,\n        contentState1.getBlockMap()\n      );\n\n      // Adjust groups state if merges occur on GroupNode Boundaries\n      const { groups } = state;\n      const newGroups = {};\n      Object.keys(groups).map((key) => {\n        if (id2 === groups[key][0]) {\n          // the starting node of a group is merging with node outside of group\n          newGroups[key] = [state.order[idx + 1], groups[key][1]];\n        } else if (id2 === groups[key][1]) {\n          // the ending node of a group is merging with the penultimate node of group\n          newGroups[key] = [groups[key][0], state.order[idx - 1]];\n        } else {\n          // the merging node is not a defining node of a group\n          newGroups[key] = groups[key];\n        }\n        // remove group, it's box, and connections if the end node is the same as start node\n        if (newGroups[key][0] === newGroups[key][1]) {\n          delete newGroups[key]; // delete group\n          // delete any connections of the deleted group\n          const temp = [...newConnections];\n          newConnections = [];\n          temp.forEach((c) => {\n            if (key !== c[0] && key !== c[1]) {\n              newConnections.push(c);\n            }\n          });\n        }\n      });\n\n      return {\n        ...state,\n        activeId: id1,\n        order: newOrder,\n        txts: {\n          ...state.txts,\n          [id1]: JSON.stringify(convertToRaw(mergedContent)),\n        },\n        splits: {\n          ...state.splits,\n          [id1]: { slice1: 0, slice2: 0 },\n        },\n        notes: {\n          ...state.notes,\n          [id1]: state.notes[id1] + state.notes[id2],\n        },\n        graph: { ...state.graph, connections: newConnections, boxes: newBoxes },\n        groups: newGroups,\n      };\n    }\n    case 'toggleNote': {\n      const { id } = action.payload;\n      return { ...state, views: { ...state.views, [id]: !state.views[id] } };\n    }\n    case 'updateNote': {\n      const { id } = action.payload;\n      const e = document.activeElement;\n      return { ...state, notes: { ...state.notes, [id]: e.value } };\n    }\n    case 'updatePosition': {\n      const { id, x, y } = action.payload;\n      return { ...state, positions: { ...state.positions, [id]: [x, y] } };\n    }\n    case 'setMode':\n      return {\n        ...state,\n        graph: {\n          ...state.graph,\n          mode: action.payload.label, // bad variables names\n          selectedNode: action.payload.id,\n        },\n      };\n    case 'resetMode':\n      return {\n        ...state,\n        graph: { ...state.graph, mode: null, selectedNode: null },\n        mode: '',\n        id: null,\n      };\n    case 'addBox': {\n      const { label, id } = action.payload;\n\n      let boxes = [];\n      // fetch boxes if they already exist\n      if (id in state.graph.boxes) {\n        boxes = [...state.graph.boxes[id]];\n      }\n      // add label if label is new\n      if (!boxes.includes(label)) {\n        boxes.push(label);\n      }\n\n      return {\n        ...state,\n        graph: {\n          ...state.graph,\n          boxes: {\n            ...state.graph.boxes,\n            [id]: boxes,\n          },\n        },\n      };\n    }\n    case 'removeBox': {\n      const { id, label } = action.payload;\n      let boxes = [...state.graph.boxes[id]];\n\n      boxes = boxes.filter(function (value, index, arr) {\n        return value !== label;\n      });\n\n      return {\n        ...state,\n        graph: { ...state.graph, boxes: { ...state.graph.boxes, [id]: boxes } },\n      };\n    }\n    case 'addConnection':\n      // Verify that connection does not already exist\n      if (\n        state.graph.connections.filter(\n          (c) => c.toString() === action.payload.connection.toString()\n        ).length > 0 &&\n        state.graph.connections.length > 0\n      ) {\n        return state;\n      }\n      // Add connection\n      return {\n        ...state,\n        graph: {\n          ...state.graph,\n          connections: [...state.graph.connections, action.payload.connection],\n        },\n      };\n    case 'deleteConnection': {\n      const newConnections = state.graph.connections.filter(\n        (connection) =>\n          connection[0] + connection[1] + connection[2] !== action.payload.id\n      );\n      return {\n        ...state,\n        graph: { ...state.graph, connections: newConnections },\n      };\n    }\n    case 'groupIds': {\n      const { start, end, selectionSize } = action.payload;\n      const { order } = state;\n      const { groups } = state;\n      const groupId = nanoid();\n\n      // Grouping single node is not allowed\n      if (start === end) {\n        return state;\n      }\n      // Get array of selected group's ids\n      const startIdx = order.indexOf(start);\n      const endIdx = order.indexOf(end);\n      const selectedGroup = order.slice(startIdx, endIdx + 1);\n      // Check that selected group is contiguous, otherwise not allowed\n      if (selectionSize !== selectedGroup.length) {\n        return state;\n      }\n\n      // Get all ids from existing groups\n      const idsInExistingGroups = new Set();\n      Object.keys(groups).forEach((groupId) => {\n        const group = groups[groupId];\n        const sIdx = order.indexOf(group[0]);\n        const eIdx = order.indexOf(group[1]);\n        const ids = order.slice(sIdx, eIdx + 1);\n        ids.forEach((id) => idsInExistingGroups.add(id));\n      });\n\n      // Checks that the selected group is valid:\n      // No id in selected group should exist within a pre-existing group\n      let containsElement = false;\n      selectedGroup.forEach((id) => {\n        if (idsInExistingGroups.has(id)) {\n          containsElement = true;\n        }\n      });\n      if (containsElement) {\n        return state;\n      }\n\n      // Returns updated groups object\n      return {\n        ...state,\n        groups: { ...state.groups, [groupId]: [start, end] },\n      };\n    }\n    case 'ungroupIds': {\n      const { start, end } = action.payload;\n      const { order, groups } = state;\n\n      // Get selection ids\n      const startIdx = order.indexOf(start);\n      const endIdx = order.indexOf(end);\n      const selection = order.slice(startIdx, endIdx + 1);\n\n      // For each group,\n      // if any of the selected nodes are in the group,\n      // then remove that group, its boxes, and its connections\n      const newGroups = { ...groups };\n      const newBoxes = { ...state.graph.boxes };\n      let newConnections = [...state.graph.connections];\n\n      Object.keys(groups).forEach((groupId) => {\n        // Get ids in group\n        const g = groups[groupId];\n        const sIdx = order.indexOf(g[0]);\n        const eIdx = order.indexOf(g[1]);\n        const ids = order.slice(sIdx, eIdx + 1);\n\n        // Get ids that are shared by group and selection\n        const sharedIds = ids.filter((id) => selection.indexOf(id) !== -1);\n\n        // If group contains selected ids,\n        // Remove group & group's boxes and connections\n        if (sharedIds.length > 0) {\n          delete newGroups[groupId];\n          delete newBoxes[groupId];\n          newConnections = [];\n          const temp = [...state.graph.connections];\n          temp.forEach((c) => {\n            if (groupId !== c[0] && groupId !== c[1]) {\n              newConnections.push(c);\n            }\n          });\n        }\n      });\n\n      return {\n        ...state,\n        groups: newGroups,\n        graph: {\n          ...state.graph,\n          boxes: newBoxes,\n          connections: newConnections,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const ArgButtonsSlice = createSlice({\n  name: 'args',\n  initialState: {\n    connection_color: null, // color of current selected arrow type\n    tail_selected: false, // specifies if prior click was on valid node\n    tail_id: null, // id of prior node click\n  },\n  reducers: {\n    updateColor: (state, action) => {\n      state.connection_color = action.color;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n    updateTail: (state, action) => {\n      state.tail_selected = true;\n      state.tail_id = action.id;\n    },\n    resetToDragging: (state) => {\n      state.connection_color = null;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n  },\n});\n\nexport const {\n  updateColor,\n  updateTail,\n  resetToDragging,\n} = ArgButtonsSlice.actions;\nexport default ArgButtonsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport undoable, { excludeAction } from 'redux-undo';\nimport blocksReducer from '../features/blocks/BlocksReducer';\nimport ArgsButtonsReducer from '../features/ArgButtons/ArgButtonsSlice';\n\nexport default configureStore({\n  reducer: {\n    blocks: undoable(blocksReducer, {\n      filter: excludeAction([\n        'updateId',\n        'updateCaret',\n        'updatePosition',\n        'toggleNote',\n        'updateNote',\n        'resetMode',\n        'setMode',\n        'updateSelection',\n      ]),\n    }),\n    args: ArgsButtonsReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}