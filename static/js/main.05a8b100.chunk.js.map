{"version":3,"sources":["features/blocks/BlocksSlice.js","features/blocks/Note.js","features/blocks/Text.js","features/blocks/Blocks.js","features/HeaderButtons/HeaderButtons.js","features/graph/Nodes.js","features/graph/SequentialPath.js","App.js","features/graph/Graph.js","reportWebVitals.js","features/ArgButtons/ArgButtonsSlice.js","app/store.js","index.js"],"names":["BlocksSlice","createSlice","name","initialState","caret","activeId","order","indents","id1","txts","notes","views","positions","reducers","updateText","state","action","e","document","activeElement","getAttribute","id","payload","value","selectionStart","splitText","idx","indexOf","id2","nanoid","textOne","substr","textTwo","newOrder","splice","pos","newPosition","mergeText","tabOut","tabIn","toggleNote","updateNote","note","toggleAllNotes","Object","keys","forEach","status","updatePosition","x","y","actions","Note","dispatch","view","indent","undefined","class","style","marginRight","onSelect","onChange","onClick","ctrlKey","metaKey","shiftKey","ToggleNoteButton","type","Text","txt","placeholder","Blocks","useDispatch","useSelector","blocks","map","MergeButton","SplitButton","TabOutButton","TabInButton","Nodes","position","handleDrag","d","srcElement","lastX","deltaX","lastY","deltaY","onStop","onDrag","defaultPosition","className","Node","SequentialPath","links","i","length","path","key","push","start","end","strokeWidth","lineColor","dashness","headColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ArgButtonsSlice","connection_color","tail_selected","tail_id","updateColor","color","updateTail","resetToDragging","configureStore","reducer","blocksReducer","args","ArgsButtonsReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.05a8b100.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport const BlocksSlice = createSlice({\n  name: 'blocks',\n  initialState: {\n    caret: -1,\n    activeId: 'id1',\n    order: ['id1'],\n    indents: { id1: 0 },\n    txts: { id1: '' },\n    notes: { id1: '' },\n    views: { id1: false },\n    positions: { id1: [0, 0] },\n  },\n  reducers: {\n    // Text Updates\n    updateText: (state, action) => {\n      const e = document.activeElement;\n      if (e.getAttribute('class') !== 'text') {\n        // only update when active element\n        return state;\n      }\n      const id = action.payload;\n      state.txts[id] = e.value;\n      state.caret = e.selectionStart;\n      state.activeId = id;\n    },\n    splitText: (state) => {\n      const id = state.activeId;\n      const idx = state.order.indexOf(id);\n      const id2 = nanoid();\n      const caret = state.caret;\n      const textOne = state.txts[id].substr(0, caret);\n      const textTwo = state.txts[id].substr(caret);\n      const newOrder = [...state.order];\n      newOrder.splice(idx + 1, 0, id2);\n\n      const pos = state.positions[id];\n      const newPosition = [pos[0], pos[1] + 50];\n\n      state = {\n        ...state,\n        activeId: id2,\n        order: newOrder,\n        txts: { ...state.txts, [id]: textOne, [id2]: textTwo },\n        indents: { ...state.indents, [id2]: 0 },\n        notes: { ...state.notes, [id2]: '' },\n        views: { ...state.views, [id2]: false },\n        positions: { ...state.positions, [id2]: newPosition },\n      };\n      return state;\n    },\n    mergeText: (state) => {\n      const id2 = state.activeId;\n      const idx = state.order.indexOf(id2);\n      if (idx === 0) {\n        // not possible to merge up first block\n        return state;\n      }\n      const id1 = state.order[idx - 1];\n      const newOrder = [...state.order];\n      newOrder.splice(idx, 1);\n\n      state = {\n        ...state,\n        activeId: id1,\n        order: newOrder,\n        txts: { ...state.txts, [id1]: state.txts[id1] + state.txts[id2] },\n        notes: { ...state.notes, [id1]: state.notes[id1] + state.notes[id2] },\n      };\n      return state;\n    },\n    // Tabbing Buttons\n    tabOut: (state) => {\n      const id = state.activeId;\n      state.indents[id] += 1;\n    },\n    tabIn: (state) => {\n      const id = state.activeId;\n      if (state.indents[id] > 0) {\n        state.indents[id] -= 1;\n      }\n    },\n    // Note Updating\n    toggleNote: (state, action) => {\n      const id = action.payload;\n      if (state.views[id] === true) {\n        state.views[id] = false;\n      } else {\n        state.views[id] = true;\n      }\n      return state;\n    },\n    updateNote: (state, action) => {\n      const id = action.payload;\n      const e = document.activeElement;\n      const note = e.value; // .replace(/\\n\\r?/g, '<br />');\n      state.notes[id] = note;\n    },\n    toggleAllNotes: (state, action) => {\n      Object.keys(state.notes).forEach((id) => {\n        state.notes[id] = action.status;\n      });\n    },\n    updatePosition: (state, action) => {\n      const { id, x, y } = action.payload;\n      state.positions[id] = [x, y];\n    },\n  },\n});\n\nexport const {\n  updateText,\n  splitText,\n  mergeText,\n  tabOut,\n  tabIn,\n  toggleNote,\n  updateNote,\n  toggleAllNotes,\n  updatePosition,\n} = BlocksSlice.actions;\nexport default BlocksSlice.reducer;\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport { toggleNote, updateNote } from './BlocksSlice';\nimport './Blocks.css';\n\nfunction Note(dispatch, id, note, view, indent) {\n  if (view == false || view == undefined) {\n    return <div></div>;\n  }\n  const n = (\n    <TextareaAutosize\n      id={id}\n      class=\"note\"\n      style={{\n        marginRight: indent * 10,\n      }}\n      onSelect={() => dispatch(updateNote(id))}\n      onChange={() => dispatch(updateNote(id))}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch(updateNote(id));\n      }}\n      value={note}\n    />\n  );\n  return n;\n}\n\nfunction ToggleNoteButton(dispatch, id) {\n  const toggle = (\n    <label class=\"switch\">\n      <input type=\"checkbox\" onClick={() => dispatch(toggleNote(id))} />\n      <span class=\"slider round\"></span>\n    </label>\n  );\n  return toggle;\n}\n\nexport { Note, ToggleNoteButton };\n","import React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport { updateText } from './BlocksSlice';\nimport './Blocks.css';\n\nexport default function Text(dispatch, id, txt, indent) {\n  const text = (\n    <TextareaAutosize\n      id={id}\n      class=\"text\"\n      placeholder=\"paste hebrew here\"\n      style={{\n        marginRight: indent * 10,\n      }}\n      onSelect={() => dispatch(updateText(id))}\n      onChange={() => dispatch(updateText(id))}\n      onClick={(e) => {\n        if (e.ctrlKey || e.metaKey || e.shiftKey) return 0; // ignore shift clicks\n        dispatch(updateText(id));\n      }}\n      value={txt}\n    />\n  );\n  return text;\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Note, ToggleNoteButton } from './Note';\nimport Text from './Text';\nimport './Blocks.css';\n\nexport default function Blocks() {\n  const dispatch = useDispatch();\n  const order = useSelector((state) => state.blocks.order);\n  const txts = useSelector((state) => state.blocks.txts);\n  const indents = useSelector((state) => state.blocks.indents);\n  const notes = useSelector((state) => state.blocks.notes);\n  const views = useSelector((state) => state.blocks.views);\n\n  const blocks = order.map((id) => (\n    <div class=\"cell\">\n      {ToggleNoteButton(dispatch, id)}\n      {Text(dispatch, id, txts[id], indents[id])}\n      {Note(dispatch, id, notes[id], views[id], indents[id])}\n    </div>\n  ));\n  return blocks;\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { mergeText, splitText, tabOut, tabIn } from '../blocks/BlocksSlice';\nimport './HeaderButtons.css';\n\nexport function MergeButton() {\n  const dispatch = useDispatch();\n  const mergeButton = (\n    <button type=\"button\" onClick={() => dispatch(mergeText())}>\n      merge\n    </button>\n  );\n  return mergeButton;\n}\n\nexport function SplitButton() {\n  const dispatch = useDispatch();\n  const splitButton = (\n    <button type=\"button\" onClick={() => dispatch(splitText())}>\n      split\n    </button>\n  );\n  return splitButton;\n}\n\nexport function TabOutButton() {\n  const dispatch = useDispatch();\n  const tabOutButton = (\n    <button type=\"button\" onClick={() => dispatch(tabOut())}>\n      tabout\n    </button>\n  );\n  return tabOutButton;\n}\n\nexport function TabInButton() {\n  const dispatch = useDispatch();\n  const tabInButton = (\n    <button type=\"button\" onClick={() => dispatch(tabIn())}>\n      tabin\n    </button>\n  );\n  return tabInButton;\n}\n\nexport default function HeaderButtons() {\n  return (\n    <div class=\"header_buttons\">\n      {TabInButton()}\n      {TabOutButton()}\n      {MergeButton()}\n      {SplitButton()}\n    </div>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport Draggable from 'react-draggable';\nimport { updatePosition } from '../blocks/BlocksSlice';\nimport './Graph.css';\n\nconst Node = (id, position, txt) => {\n  const dispatch = useDispatch();\n  const handleDrag = (e, d) => {\n    const id = e.srcElement.id;\n    dispatch(\n      updatePosition({ id: id, x: d.lastX + d.deltaX, y: d.lastY + d.deltaY })\n    );\n  };\n  const [x, y] = position;\n  return (\n    <div>\n      <Draggable\n        onStop={handleDrag}\n        onDrag={handleDrag}\n        key={id}\n        defaultPosition={{ x: x, y: y }}\n      >\n        <div className=\"nodex\" id={id}>\n          {txt}\n        </div>\n      </Draggable>\n    </div>\n  );\n};\n\nexport default function Nodes() {\n  const positions = useSelector((state) => state.blocks.positions);\n  const order = useSelector((state) => state.blocks.order);\n  const txts = useSelector((state) => state.blocks.txts);\n\n  const nodes = order.map((id) => Node(id, positions[id], txts[id]));\n  return nodes;\n}\n","import { useSelector } from 'react-redux';\nimport React from 'react';\nimport Xarrow from 'react-xarrows';\nimport './Graph.css';\n\nexport default function SequentialPath() {\n  const order = useSelector((state) => state.blocks.order);\n\n  let links = {};\n  for (let i = 0; i < order.length - 1; i++) {\n    links[order[i]] = order[i + 1];\n  }\n\n  let path = [];\n  Object.keys(links).forEach((key) =>\n    path.push(\n      <Xarrow\n        start={key}\n        end={links[key]}\n        strokeWidth={1}\n        lineColor=\"grey\"\n        dashness={true}\n        headColor=\"grey\"\n      />\n    )\n  );\n  return path;\n}\n","import './App.css';\nimport React from 'react';\nimport Blocks from './features/blocks/Blocks';\nimport HeaderButtons from './features/HeaderButtons/HeaderButtons';\nimport Graph from './features/graph/Graph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"graph\">{Graph()}</div>\n      <div className=\"right_panel\">\n        {HeaderButtons()}\n        {Blocks()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './Graph.css';\nimport Nodes from './Nodes';\nimport SequentialPath from './SequentialPath';\n\nexport default function Graph() {\n  return (\n    <div className=\"canvas\">\n      {Nodes()}\n      {SequentialPath()}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const ArgButtonsSlice = createSlice({\n  name: 'args',\n  initialState: {\n    connection_color: null, // color of current selected arrow type\n    tail_selected: false, // specifies if prior click was on valid node\n    tail_id: null, // id of prior node click\n  },\n  reducers: {\n    updateColor: (state, action) => {\n      state.connection_color = action.color;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n    updateTail: (state, action) => {\n      state.tail_selected = true;\n      state.tail_id = action.id;\n    },\n    resetToDragging: (state) => {\n      state.connection_color = null;\n      state.tail_selected = false;\n      state.tail_id = null;\n    },\n  },\n});\n\nexport const {\n  updateColor,\n  updateTail,\n  resetToDragging,\n} = ArgButtonsSlice.actions;\nexport default ArgButtonsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport blocksReducer from '../features/blocks/BlocksSlice';\nimport ArgsButtonsReducer from '../features/ArgButtons/ArgButtonsSlice';\n\nexport default configureStore({\n  reducer: {\n    blocks: blocksReducer,\n    args: ArgsButtonsReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}